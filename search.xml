<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACM--概率</title>
    <url>/2021/09/24/blog1/</url>
    <content><![CDATA[<h4 id="n个球放入m个盒子问题"><a href="#n个球放入m个盒子问题" class="headerlink" title="n个球放入m个盒子问题"></a>n个球放入m个盒子问题</h4><ol>
<li><p>球相同，盒子不同，没有空盒子 n&gt;=m</p>
<p>插板法， C（n-1,m-1)</p>
</li>
<li><p>球相同，盒子不同，可以有空盒子</p>
<p>假设每个盒子已经有一个球，插板法 C（n+m-1,m-1)</p>
</li>
<li><p>球不同，盒子相同，没有空盒子</p>
<p> dp[n][m] = m * dp[n-1][m] + dp[n-1][m-1] 1 &lt;= m &lt; n</p>
<p>第二类斯特林数</p>
</li>
<li><p>球不同，盒子相同，可以有空盒子</p>
<p>第三种情况 枚举箱子的个数</p>
</li>
<li><p>球不同，盒子不同，没有空箱</p>
<p>dp[n][m] * fac[m]</p>
<p>dp[n][m] 指第三种情况， 因为球是不同的，盒子是相同的，给盒子定义顺序就好了</p>
</li>
<li><p>球不同，盒子不同，允许空箱，</p>
<p>m的n次方</p>
</li>
<li><p>球相同，盒子相同，允许空箱。</p>
<p>dp[n][m] = dp[n][m-1] + dp[n-m][m] n&gt;=m</p>
<p>dp[n][m] = dp[n][m-1]  n &lt; m</p>
<p>dp[k][1] = 1, dp[1][k] = 1,dp[0][k] = 1;</p>
</li>
<li><p>球相同，盒子相同，没有空箱子</p>
<p>dp[n-m][m],dp同第7种情况， n&gt;=m</p>
<p>0 n &lt; m</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>cifra10_dl</title>
    <url>/2021/10/09/blog10/</url>
    <content><![CDATA[<p>#cifra10_dl</p>
<p>选择深度学习框架： PyTorch</p>
<p>数据集：CIFAR-10 数据集</p>
<blockquote>
<p>数据集介绍：该数据集共有60000张彩色图像，这些图像是32*32，分为10个类，每类6000张图。这里面有50000张用于训练，构成了5个训练批，每一批10000张图；另外10000用于测试，单独构成一批。测试批的数据里，取自10类中的每一类，每一类随机取1000张。抽剩下的就随机排列组成了训练批。注意一个训练批中的各类图像并不一定数量相同，总的来看训练批，每一类都有5000张图。</p>
</blockquote>
<p>实验目的： 通过调整网络结构，参数等方式，记录结果的变化情况。</p>
<p>步骤：</p>
<p>得到归一化值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rgb_mean = np.mean(trainset.train_data, axis=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>))/<span class="number">255</span></span><br><span class="line">rgb_std = np.std(trainset.train_data, axis=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>))/<span class="number">255</span></span><br><span class="line">rgb_mean ,rgb_std </span><br></pre></td></tr></table></figure>



<p>介绍网络：</p>
<p>我这个项目要表达哪些内容：</p>
<ul>
<li>模型推理前的所有步骤，为什么这么做</li>
<li>模型结果整理</li>
<li>模型主要尝试了哪些方向，这些方向的结果都是什么？（写代码，记录答案，第一次尝试，第二次尝试，必要可放在一个py文件中）</li>
<li>总结</li>
</ul>
<p>数据集预处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transform_train = transforms.Compose([</span><br><span class="line">    transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),</span><br><span class="line">    transforms.RandomHorizontalFlip(),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>), (<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>)),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">transform_test = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>), (<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>)),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform_train)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(</span><br><span class="line">    trainset, batch_size=<span class="number">128</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform_test)</span><br><span class="line">testloader = torch.utils.data.DataLoader(</span><br><span class="line">    testset, batch_size=<span class="number">100</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;deer&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=args.lr,</span><br><span class="line">                      momentum=0.9, weight_decay=5e-4)</span><br><span class="line">scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=200)</span><br></pre></td></tr></table></figure>





<p>训练过程：</p>
<p>测试过程：</p>
<p>结果：</p>
<h4 id="图片数据归一化处理"><a href="#图片数据归一化处理" class="headerlink" title="图片数据归一化处理"></a>图片数据归一化处理</h4><p>如果输入层x</p>
]]></content>
  </entry>
  <entry>
    <title>计算机操作系统学习笔记（一）</title>
    <url>/2021/10/10/blog11/</url>
    <content><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="第四章-文件管理"><a href="#第四章-文件管理" class="headerlink" title="第四章 文件管理"></a>第四章 文件管理</h2><h3 id="4-1-文件系统基础"><a href="#4-1-文件系统基础" class="headerlink" title="4.1 文件系统基础"></a>4.1 文件系统基础</h3><h4 id="4-1-1-文件的概念"><a href="#4-1-1-文件的概念" class="headerlink" title="4.1.1 文件的概念"></a>4.1.1 文件的概念</h4><h5 id="1-文件的定义"><a href="#1-文件的定义" class="headerlink" title="1. 文件的定义"></a>1. 文件的定义</h5><p>文件是以计算机硬盘为载体的存储在计算机上的信息集合，文件可以是文本文档、图片、程序等。</p>
<p>在系统运行时，计算机以进程为基本程序为基本单位进行资源的调度和分配；而在用户进行的输入、输出中，则以文件为基本单位。</p>
<p>操作系统中的文件系统就是用于实现用户的这些管理要求的。</p>
<p><strong>文件结构</strong></p>
<ul>
<li>数据项<ul>
<li>基本数据项</li>
<li>组合数据项</li>
</ul>
</li>
<li>记录</li>
<li>文件<ul>
<li>有结构文件</li>
<li>无结构文件（二进制文件等）又称流式文件</li>
</ul>
</li>
</ul>
<h5 id="2-文件的属性"><a href="#2-文件的属性" class="headerlink" title="2. 文件的属性"></a>2. 文件的属性</h5><ul>
<li>名称</li>
<li>标识符</li>
<li>类型</li>
<li>位置</li>
<li>大小</li>
<li>保护</li>
<li>时间、日期和用户标识</li>
</ul>
<h5 id="3-文件的基本操作"><a href="#3-文件的基本操作" class="headerlink" title="3. 文件的基本操作"></a>3. 文件的基本操作</h5><ul>
<li>创建文件</li>
<li>写文件</li>
<li>读文件</li>
<li>文件重定位 （按某条件搜索目录，将当前文件位置设为给定值，不会读写文件）</li>
<li>删除文件</li>
<li>截断文件（文件所有属性不变，删除文件内容）</li>
</ul>
<h5 id="4-文件的打开和关闭"><a href="#4-文件的打开和关闭" class="headerlink" title="4. 文件的打开和关闭"></a>4. 文件的打开和关闭</h5><p>因为许多文件操作都涉及为给定文件搜索相关目录条目，因此许多系统要求在首次使用文件时，使用系统调用open将指明文件的属性（包括外存上的物理位置）从外存复制到内存打开文件表的一个表目中，并将该表目的编号返回给用户。</p>
<h4 id="4-1-2-文件的逻辑结构"><a href="#4-1-2-文件的逻辑结构" class="headerlink" title="4.1.2 文件的逻辑结构"></a>4.1.2 文件的逻辑结构</h4><p>文件的逻辑结构是从用户观点出发看到的文件的组织形式。</p>
<p>按逻辑结构，文件可划分为无结构文件和有结构文件两种。</p>
<h5 id="1-无结构文件（流式文件）"><a href="#1-无结构文件（流式文件）" class="headerlink" title="1. 无结构文件（流式文件）"></a>1. 无结构文件（流式文件）</h5><h5 id="2-有结构文件"><a href="#2-有结构文件" class="headerlink" title="2. 有结构文件"></a>2. 有结构文件</h5><ul>
<li><p>顺序文件</p>
</li>
<li><p>索引文件</p>
<p>索引表本身是定长记录的顺序文件。</p>
</li>
<li><p>索引顺序文件</p>
<p>索引顺序文件将顺序文件中的所有记录分为若干组，为顺序文件建立一张索引表，在索引表中为每组中的第一条记录建立一个索引项，其中含有该记录的关键字值和指向该记录的指针。</p>
</li>
<li><p>直接文件或散列文件。</p>
<p>给定记录的键值或通过散列函数转换的键值直接决定记录的物理地址。</p>
</li>
</ul>
<h4 id="4-1-3-目录结构"><a href="#4-1-3-目录结构" class="headerlink" title="4.1.3 目录结构"></a>4.1.3 目录结构</h4><p>文件目录包含有关文件的信息、位置和所有权等，这些信息主要由操作系统进行管理。首先我们来看目录管理的基本要求： 按名存取、检索速度，提供用于控制访问文件的信息。</p>
<h5 id="1-文件控制块和索引节点"><a href="#1-文件控制块和索引节点" class="headerlink" title="1. 文件控制块和索引节点"></a>1. 文件控制块和索引节点</h5><ul>
<li><p>文件控制块。（FCB）</p>
<p>FCB的有序集合称为文件目录，1个FCB就是一个文件目录项。</p>
<p>FCB主要包括以下信息。</p>
<ul>
<li>基本信息</li>
<li>存取控制信息</li>
<li>使用信息</li>
</ul>
</li>
<li><p>索引结点</p>
<p>文件被打开时，磁盘索引节点复制到内存的索引节点中，以便于使用。</p>
</li>
</ul>
<blockquote>
<p>FCB 或者 索引节点相当于图书馆中图书的索书号，我们可以在图书馆网站上找到图书的索书号，然后根据索书号找到想要的书本</p>
</blockquote>
<h5 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h5><p>所需要执行的操作：</p>
<ul>
<li>搜索</li>
<li>创建文件</li>
<li>删除文件</li>
<li>显示目录</li>
<li>修改目录</li>
</ul>
<p>操作时，考虑以下几种目录结构：</p>
<ul>
<li>单级目录结构</li>
<li>两级目录结构</li>
<li>多级目录结构（树形目录结构）</li>
<li>无环图目录结构</li>
</ul>
<h4 id="4-1-4-文件共享"><a href="#4-1-4-文件共享" class="headerlink" title="4.1.4 文件共享"></a>4.1.4 文件共享</h4><h5 id="1-基于索引节点的共享方式（硬链接）"><a href="#1-基于索引节点的共享方式（硬链接）" class="headerlink" title="1.基于索引节点的共享方式（硬链接）"></a>1.基于索引节点的共享方式（硬链接）</h5><h5 id="2-利用符号链实现文件共享（软链接）"><a href="#2-利用符号链实现文件共享（软链接）" class="headerlink" title="2. 利用符号链实现文件共享（软链接）"></a>2. 利用符号链实现文件共享（软链接）</h5><p>利用符号链方式实现文件共享时，只有文件的拥有者才拥有指向其索引节点的指针。而共享该文件的其他用户只有该文件的路径名，并不拥有指向其索引结点的指针。</p>
<h4 id="4-1-5-文件保护"><a href="#4-1-5-文件保护" class="headerlink" title="4.1.5 文件保护"></a>4.1.5 文件保护</h4><h5 id="1-访问类型"><a href="#1-访问类型" class="headerlink" title="1. 访问类型"></a>1. 访问类型</h5><ul>
<li>读</li>
<li>写</li>
<li>执行。将文件装入内存并执行</li>
<li>添加。将新信息添加到文件结尾部分</li>
<li>删除。删除文件，释放空间。</li>
<li>列表清单。列出文件名和文件属性。</li>
</ul>
<h5 id="2-访问控制"><a href="#2-访问控制" class="headerlink" title="2. 访问控制"></a>2. 访问控制</h5><p>解决访问控制最常用的方式是根据用户身份进行控制，而实现基于身份访问的最普通的方式是，为每个文件和目录增加一个访问控制列表，依规定每个用户名以及其所允许的访问类型。</p>
<h5 id="3-加密控制"><a href="#3-加密控制" class="headerlink" title="3. 加密控制"></a>3. 加密控制</h5><h5 id="4-口令保护"><a href="#4-口令保护" class="headerlink" title="4. 口令保护"></a>4. 口令保护</h5><h3 id="4-2-文件系统实现"><a href="#4-2-文件系统实现" class="headerlink" title="4.2 文件系统实现"></a>4.2 文件系统实现</h3><p>介绍文件物理结构和目录的实现</p>
<h4 id="4-2-1-文件系统层次结构"><a href="#4-2-1-文件系统层次结构" class="headerlink" title="4.2.1 文件系统层次结构"></a>4.2.1 文件系统层次结构</h4><ul>
<li>用户调用接口</li>
<li>文件目录系统</li>
<li>存取控制验证模块</li>
<li>逻辑文件系统与文件信息缓冲区</li>
<li>物理文件系统</li>
<li>辅助分配模块</li>
<li>设备管理程序模块</li>
</ul>
<h4 id="4-2-2-目录实现"><a href="#4-2-2-目录实现" class="headerlink" title="4.2.2 目录实现"></a>4.2.2 目录实现</h4><p>目录的实现就是为了查找。</p>
<p>目录实现的基本方法有线性列表和哈希表两种。</p>
<h4 id="4-2-3-文件实现"><a href="#4-2-3-文件实现" class="headerlink" title="4.2.3 文件实现"></a>4.2.3 文件实现</h4><p>文件的实现就是研究文件的物理结构，即文件数据在物理存储设备上是如何分布和组织的。同一个问题有两个方面的回答：一是文件的分配方式，讲的是对磁盘非空闲块的管理；二是文件存储空间管理，讲的是对磁盘空闲块的管理。</p>
<h5 id="1-文件分配方式"><a href="#1-文件分配方式" class="headerlink" title="1. 文件分配方式"></a>1. 文件分配方式</h5><p>讲的是如何为文件分配磁盘块。</p>
<ul>
<li><p>连续分配</p>
</li>
<li><p>链接分配</p>
<p>采取离散分配的方式，消除了外部碎片，显著提高了磁盘空间的利用率。</p>
<ul>
<li>隐式链接（链式搜索）</li>
<li>显式链接（把链上的指针提取出来，构建FAT文件分配表，加快了检索速度，减少了访问磁盘次数）</li>
</ul>
</li>
<li><p>索引分配</p>
<p>链接分配方式解决了连续分配的外部碎片和文件大小管理的问题。但是，链接分配不能有效支持直接访问。（FAT除外）。</p>
</li>
</ul>
<h5 id="2-文件存储空间管理"><a href="#2-文件存储空间管理" class="headerlink" title="2. 文件存储空间管理"></a>2. 文件存储空间管理</h5><p>文件存储器空间的划分与初始化。</p>
<p>在一个文件卷中，文件数据信息的空间（文件区）和存放控制信息FCB的空间（目录区）是分离的。</p>
<p>文件存储器空间管理。</p>
<p>文件存储设备的管理实质上是对空闲块的组织和管理，它包括空闲块的组织和回收等问题。</p>
<p>（1）空闲表法</p>
<p>​    连续分配方式</p>
<p>（2）空闲链表法</p>
<p>（3）位示图法</p>
<p>（4）成组链接法</p>
<p>​    空闲表法和空闲链表法都不太适用于大型文件系统，因为这会使空闲表或者空闲链表太大。在UNIX系统中采用的是成组链接法，这种方法结合了空闲表和空闲链表两种方式，克服了表大的问题。 </p>
<h3 id="4-3-磁盘组织与管理"><a href="#4-3-磁盘组织与管理" class="headerlink" title="4.3 磁盘组织与管理"></a>4.3 磁盘组织与管理</h3><p>本节主要介绍文件系统管理磁盘的方式。</p>
<h4 id="4-3-1-磁盘的结构"><a href="#4-3-1-磁盘的结构" class="headerlink" title="4.3.1 磁盘的结构"></a>4.3.1 磁盘的结构</h4><h4 id="4-3-2-磁盘调度算法"><a href="#4-3-2-磁盘调度算法" class="headerlink" title="4.3.2 磁盘调度算法"></a>4.3.2 磁盘调度算法</h4><h4 id="4-3-3-磁盘的管理"><a href="#4-3-3-磁盘的管理" class="headerlink" title="4.3.3 磁盘的管理"></a>4.3.3 磁盘的管理</h4><h2 id="第五章-输入-输出（I-O）管理"><a href="#第五章-输入-输出（I-O）管理" class="headerlink" title="第五章 输入/输出（I/O）管理"></a>第五章 输入/输出（I/O）管理</h2>]]></content>
  </entry>
  <entry>
    <title>计算机操作系统学习笔记（二）</title>
    <url>/2021/10/13/blog12/</url>
    <content><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p>考纲内容：</p>
<ol>
<li>进程与线程<ul>
<li>进程的概念：进程的状态与转换</li>
<li>进程控制：进程组织</li>
<li>进程通信；线程概念和多线程模型</li>
</ul>
</li>
<li>处理机调度<ul>
<li>调度的基本概念；调度时机、切换与过程</li>
<li>调度的基本准则；调度方式；典型调度算法</li>
</ul>
</li>
<li>进程同步<ul>
<li>实现进程同步的基本概念</li>
<li>实现临界区互斥的基本方法</li>
<li>信号量；管程；经典同步问题</li>
</ul>
</li>
<li>死锁<ul>
<li>死锁的概念；死锁处理策略</li>
<li>死锁预防；死锁避免；死锁的检测和解除</li>
</ul>
</li>
</ol>
<h3 id="2-1-1-进程的概念和特征"><a href="#2-1-1-进程的概念和特征" class="headerlink" title="2.1.1 进程的概念和特征"></a>2.1.1 进程的概念和特征</h3><h4 id="1-进程的概念"><a href="#1-进程的概念" class="headerlink" title="1. 进程的概念"></a>1. 进程的概念</h4><p>为了参与并发执行的程序（含数据）能够独立地运行，必须为之配置一个专门的数据结构，称为进程控制块（PCB）。系统利用PCB来描述进程的基本情况和运行状态，进而控制和管理进程。由程序段、相关数据段、和PCB三部分构成了进程映像（进程实体）。</p>
<p>PCB是进程存在的唯一标志。</p>
<p>定义：</p>
<ul>
<li>进程是程序的一次执行过程</li>
<li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动</li>
<li>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</li>
</ul>
<h4 id="2-进程的特征"><a href="#2-进程的特征" class="headerlink" title="2. 进程的特征"></a>2. 进程的特征</h4><p>进程的基本特征是对比单个程序的顺序执行提出的，也是对进程管理提出的基本要求。</p>
<ul>
<li><p>动态性。进程是程序的一次执行，它有着创建、活动、暂停、终止等过程，具有一定的生命周期，是动态地产生、变化和消亡的。动态性是进程最基本的特征。</p>
</li>
<li><p>并发性。</p>
<p>指多个进程实体同时存于内存中，能在一段时间内同时运行。并发性是进程的重要特征，同时也是操作系统的重要特征。引入进程的目的就是为了使程序能与其他进程的程序并发执行，以提高资源利用率。</p>
</li>
<li><p>独立性。</p>
</li>
<li><p>异步性。由于进程的相互制约，使得进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进。异步性会导致结果的不可再现性，为此在操作系统中必须配置相应的进程同步机制。</p>
</li>
<li><p>结构性。</p>
</li>
</ul>
<h3 id="2-1-2-进程的状态与转化"><a href="#2-1-2-进程的状态与转化" class="headerlink" title="2.1.2 进程的状态与转化"></a>2.1.2 进程的状态与转化</h3><pre><code>通常进程有5种状态，前三种是基本状态。
</code></pre>
<ul>
<li>运行态。进程正在处理机上运行。在单机处理机环境下，每个时刻最多只有一个进程处于运行态。</li>
<li>就绪态。进程获得了除处理机外的一切所需资源，一旦得到处理机，便可立即运行。系统中处于就绪状态的进程可能有多个，称为就绪队列。</li>
<li>阻塞态。进程正在等待某一资源而暂停运行。即使处理机空闲，该进程也不能运行。</li>
<li>创建态。进程正在被创建，尚未转到就绪态。</li>
<li>结束态。</li>
</ul>
<p>转换过程。</p>
<ul>
<li>就绪态-&gt;运行态：处于就绪态的进程被调度后，获得处理机资源（分派处理机时间片），于是进程就由就绪态转为运行态。</li>
<li>运行态-&gt;就绪态：处于运行态的进程在时间片用完后，不得不让出处理机，从而进程由运行态转为就绪态。此外，在可剥夺的操作系统中，当有更高优先级的进程就绪时，调度程序将正在执行的进程转为就绪态</li>
<li>运行态-&gt;阻塞态</li>
<li>阻塞态-&gt;就绪态</li>
</ul>
<h3 id="2-1-3-进程控制"><a href="#2-1-3-进程控制" class="headerlink" title="2.1.3 进程控制"></a>2.1.3 进程控制</h3><h4 id="1-进程的创建"><a href="#1-进程的创建" class="headerlink" title="1. 进程的创建"></a>1. 进程的创建</h4><p>操作系统创建一个新进程的过程如下：（创建原语）</p>
<ul>
<li>为新进程分配一个唯一的进程标识号，并申请一个空白的PCB.</li>
<li>为进程分配资源，为新进程的程序和数据及用户栈分配必要的内存空间（在PCB中体现）。注意，若资源不足，则并不是创建失败，而是处于阻塞态，等待内存资源。</li>
<li>初始化PCB，主要包括初始化标志信息、初始化处理机状态信息和初始化处理机控制信息，以及设置进程的优先级等。</li>
<li>进程就绪队列能够接纳新进程，则将新进程插入就绪队列，等待被调度运行。</li>
</ul>
<h4 id="2-进程的终止"><a href="#2-进程的终止" class="headerlink" title="2. 进程的终止"></a>2. 进程的终止</h4><p>引起进程终止的事件主要有：1. 正常结束 2. 异常结束 3. 外界干预</p>
<p>操作系统终止进程的过程如下（撤销原语）：</p>
<ol>
<li>根据被终止的标识符，检索PCB，从中读出该进程的状态。</li>
<li>若被终止进程处于执行状态，立即终止该进程的执行，将处理机资源分配给其他进程。</li>
<li>若该进程还有子孙进程，则应将其所有子孙进程终止。</li>
<li>将该进程所拥有的全部资源，或归还给父进程，或归还给操作系统。</li>
<li>将该PCB从所在队列（链表）中删除。</li>
</ol>
<h4 id="3-进程的阻塞和唤醒"><a href="#3-进程的阻塞和唤醒" class="headerlink" title="3. 进程的阻塞和唤醒"></a>3. 进程的阻塞和唤醒</h4><p>系统自动执行阻塞原语。</p>
<p>阻塞原语的执行过程如下：Block原语</p>
<ol>
<li>找到将要被阻塞进程的标识号对应的PCB。</li>
<li>若该进程为运行态，则保护其现场，将其状态转为阻塞态，停止运行。</li>
<li>把该PCB插入相应事件的等待队列，将处理机资源调度给其他就绪进程。</li>
</ol>
<p>唤醒原语的执行过程如下：WakeUP原语</p>
<ol>
<li>在该事件的等待队列中找到对应进程的PCB。</li>
<li>将其从等待队列中移出，并置其状态为就绪态。</li>
<li>把该PCB插入就绪队列，等待调度程序调度。</li>
</ol>
<h4 id="4-进程切换"><a href="#4-进程切换" class="headerlink" title="4. 进程切换"></a>4. 进程切换</h4><p>进程切换的过程如下：</p>
<ol>
<li>保存处理机上下文，包括程序计数器和其他寄存器。</li>
<li>更新PCB信息。</li>
<li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列</li>
<li>选择另一个进程执行，并更新其PCB</li>
<li>更新内存管理的数据结构</li>
<li>恢复处理机上下文。</li>
</ol>
<h3 id="2-1-4-进程的组织"><a href="#2-1-4-进程的组织" class="headerlink" title="2.1.4 进程的组织"></a>2.1.4 进程的组织</h3><ul>
<li><p>进程控制块</p>
<p>进程创建时，操作系统新建一个PCB，该结构之后常驻内存，任意时刻都可以存取，并在进程结束时删除。PCB是进程实体的一部分，是进程存在的唯一标志。</p>
<p>为了方便进程的调度和管理，需要将各进程的PCB用适当的方式组织起来。目前，常用的组织方式有链接方式和索引方式两种。链接方式将同一状态的PCB链接程一个队列，不同状态对应不同的队列。同时建立索引表。</p>
</li>
<li><p>程序段</p>
<p>就是能被进程调度程序调度到CPU执行的程序代码段。</p>
</li>
<li><p>数据段</p>
</li>
</ul>
<h3 id="2-1-5-进程的通信"><a href="#2-1-5-进程的通信" class="headerlink" title="2.1.5 进程的通信"></a>2.1.5 进程的通信</h3><p>进程通信是指进程之间的信息交换。PV操作是低级通信方式，高级通信方式是指以较高的效率传输大量数据的通信方式。高级通信方式主要有以下三类。</p>
<h4 id="1-共享存储"><a href="#1-共享存储" class="headerlink" title="1. 共享存储"></a>1. 共享存储</h4><p>在通信的进程之间存在一块可直接访问的共享空间，通过对这片共享空间进行写/读操作实现进程之间的信息交换。在对共享空间进行写/读操作时，需要使用同步互斥工具。</p>
<h4 id="2-消息传递"><a href="#2-消息传递" class="headerlink" title="2. 消息传递"></a>2. 消息传递</h4><ul>
<li>直接通信方式</li>
<li>间接通信方式</li>
</ul>
<h4 id="3-管道通信"><a href="#3-管道通信" class="headerlink" title="3. 管道通信"></a>3. 管道通信</h4><h3 id="2-1-6-线程概念和多线程模型"><a href="#2-1-6-线程概念和多线程模型" class="headerlink" title="2.1.6 线程概念和多线程模型"></a>2.1.6 线程概念和多线程模型</h3><p>引入进程的目的是为了更好地使多道程序并发执行，提高资源利用率和系统吞吐量；而引入线程的目的是为了减少程序在并发执行时所付出的时空开销，提高操作系统的并发性能。</p>
<h4 id="1-线程的基本概念"><a href="#1-线程的基本概念" class="headerlink" title="1. 线程的基本概念"></a>1. 线程的基本概念</h4><p>线程最直接的理解就是“轻量级进程”，它时一个基本的CPU执行单元，也是程序执行流的最小单元，有线程ID、程序计数器、寄存器集合和堆栈组成。线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不再拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中出现间断性。线程也有就绪、阻塞和运行三种基本状态。</p>
<p>若线程的切换发生在同一个进程内部，则只需要很少的时空开销。</p>
<h4 id="2-线程与进程的比较"><a href="#2-线程与进程的比较" class="headerlink" title="2. 线程与进程的比较"></a>2. 线程与进程的比较</h4><ol>
<li><p>调度</p>
</li>
<li><p>拥有资源</p>
</li>
<li><p>并发性</p>
</li>
<li><p>系统开销</p>
</li>
<li><p>地址空间和其他资源</p>
</li>
<li><p>通信方面</p>
</li>
</ol>
<h4 id="3-线程的属性"><a href="#3-线程的属性" class="headerlink" title="3. 线程的属性"></a>3. 线程的属性</h4><p>线程的主要属性如下：</p>
<ol>
<li>线程是一个轻型实体，它不拥有系统资源，但每个线程都应有一个唯一的标识符和一个线程控制块，线程控制块记录了线程执行的寄存器和栈等现场状态。</li>
<li>不同的线程可以执行相同的程序，即同一个服务程序被不同的用户调用时，操作系统把它们创建成不同的线程。</li>
<li>同一进程中的各个线程共享该进程所拥有的资源。</li>
<li>线程是处理机的独立调度单位，多个线程是可以并发执行的。</li>
<li>一个线程被创建后就开始了它的生命周期，直至终止。</li>
</ol>
<h4 id="4-线程的实现方式"><a href="#4-线程的实现方式" class="headerlink" title="4. 线程的实现方式"></a>4. 线程的实现方式</h4><p>线程的实现可以分为两类：用户级线程和内核级线程。</p>
<h4 id="5-多线程模型"><a href="#5-多线程模型" class="headerlink" title="5. 多线程模型"></a>5. 多线程模型</h4><ol>
<li><p>多对一模型。将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成。此模式中，用户级线程对操作系统不可见（透明）。</p>
<p>优点：线程管理是在用户空间进行的，因而效率比较高。</p>
<p>缺点：一个线程在使用内核服务时被阻塞，整个进程都会被阻塞；多个线程不能并行地运行在多处理机上。</p>
</li>
<li><p>一对一模型。将每个用户级线程映射到一个内核级线程。</p>
<p>优点：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力强。</p>
<p>缺点：每创建一个用户级线程都需要创建一个内核级线程与之对应，开销比较大。</p>
</li>
<li><p>多对多模型。集二者之长。</p>
</li>
</ol>
<h2 id="2-2-处理机调度"><a href="#2-2-处理机调度" class="headerlink" title="2.2 处理机调度"></a>2.2 处理机调度</h2><h3 id="2-2-1-调度的概念"><a href="#2-2-1-调度的概念" class="headerlink" title="2.2.1 调度的概念"></a>2.2.1 调度的概念</h3><h4 id="1-调度的基本概念"><a href="#1-调度的基本概念" class="headerlink" title="1. 调度的基本概念"></a>1. 调度的基本概念</h4><p>在多道程序系统中，进程的数量往往多于处理机的个数，因此进程争用处理机的情况在所难免。处理机调度是对处理机进行分配，即从就绪队列中按照一定的算法（公平，高效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。</p>
<p>处理机调度是多道程序操作系统的基础，是操作系统设计的核心问题。</p>
<h4 id="2-调度的层次"><a href="#2-调度的层次" class="headerlink" title="2. 调度的层次"></a>2. 调度的层次</h4><p>作业从提交到完成，要经历三级调度。</p>
<ol>
<li>作业调度。又称高级调度，其主要任务是按照一定的原则从外存上处于后备状态的作业中挑选一个（或多个）作业，给它们分配内存、输入/输出设备等等资源，并建立相应的进程，以使它们获得竞争处理机的权利。简而言之，作业调度就是内存与辅存之间的调度。对于每个作业只调入一次，调出一次。</li>
<li>中级调度。又称是内存调度，其作用是提高内存利用率和系统吞吐量。</li>
<li>进程调度。又称低级调度，其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。</li>
</ol>
<h4 id="3-三级调度之间的关系"><a href="#3-三级调度之间的关系" class="headerlink" title="3. 三级调度之间的关系"></a>3. 三级调度之间的关系</h4><h3 id="2-2-2-调度的时机，切换与过程"><a href="#2-2-2-调度的时机，切换与过程" class="headerlink" title="2.2.2 调度的时机，切换与过程"></a>2.2.2 调度的时机，切换与过程</h3><p>进程调度和切换程序是操作系统内核程序。</p>
<p>现代操作系统各种，不能进行进程的调度和切换的情况有以下几种</p>
<ol>
<li>在处理中断的过程中。</li>
<li>进程在操作系统内核程序临界区中。</li>
<li>其他需要完全屏蔽中断的原子操作过程中。</li>
</ol>
<p>应该进行进程调度与切换的情况如下：</p>
<ol>
<li>发生引起调度条件且当前进程无法继续运行下去时，可以马航进行调度与切换。若操作系统只在这种情况下进行系统给调度，则是非剥夺调度。</li>
<li>中断处理结束或自陷处理结束后。剥夺方式的调度</li>
</ol>
<h3 id="2-2-3-进程调度方式"><a href="#2-2-3-进程调度方式" class="headerlink" title="2.2.3 进程调度方式"></a>2.2.3 进程调度方式</h3><ol>
<li>非剥夺调度方式，又称非抢占方式。</li>
<li>剥夺调度方式，又称抢占方式。</li>
</ol>
<h3 id="2-2-4-调度的基本准则"><a href="#2-2-4-调度的基本准则" class="headerlink" title="2.2.4 调度的基本准则"></a>2.2.4 调度的基本准则</h3><p>为了比较处理机调度算法的性能，人们提出了很多评价准则，下面介绍其中主要的几种：</p>
<ol>
<li>CPU利用率。尽可能使这一资源利用率最高。</li>
<li>系统吞吐量。 表示单位时间内CPU完成作业的数量。</li>
<li>周转时间。周转时间是指从作业提交到作业完成所需要的时间。</li>
<li>等待时间。</li>
<li>响应时间。</li>
</ol>
<h3 id="2-2-5-典型的调度算法"><a href="#2-2-5-典型的调度算法" class="headerlink" title="2.2.5 典型的调度算法"></a>2.2.5 典型的调度算法</h3><p>操作系统中存在多种调度算法，有的调度算法适用于作业调度，有的调度算法适用于进程调度，有的调度算法两者都适用。</p>
<h4 id="1-先来先服务（FCFS）调度算法"><a href="#1-先来先服务（FCFS）调度算法" class="headerlink" title="1. 先来先服务（FCFS）调度算法"></a>1. 先来先服务（FCFS）调度算法</h4><p>特点：算法简单，效率低；对长作业比较有利，但对短作业不利；有利于CPU繁忙型作业，不利于I/O繁忙型作业。</p>
<h4 id="2-短作业优先-SJF-调度算法"><a href="#2-短作业优先-SJF-调度算法" class="headerlink" title="2. 短作业优先 (SJF) 调度算法"></a>2. 短作业优先 (SJF) 调度算法</h4><p>特点：平均等待时间，平均周转时间最少。p>
<h4 id="3-优先级调度算法"><a href="#3-优先级调度算法" class="headerlink" title="3. 优先级调度算法"></a>3. 优先级调度算法</h4><p>它即可用于作业调度，又可用于进程调度。</p>
<p>根据新的更高优先级进程能否抢占正在执行的进程，可将该调度算法分为如下两种：</p>
<ol>
<li>非剥夺式优先级调度算法。</li>
<li>剥夺式优先级调度算法。</li>
</ol>
<p>而根据进程创建后其优先级是否可以改变，可以将进程优先级分为以下两种：</p>
<ol>
<li>静态优先级。</li>
<li>动态优先级。</li>
</ol>
<p>一般来说，进程优先级的设置可以参照以下原则：</p>
<ol>
<li>系统进程 &gt; 用户进程。 系统进程作为系统的管理者，理应拥有更高的优先级。</li>
<li>交互型进程 &gt; 非交互型进程（或前台进程 大于 后台进程）。</li>
<li>I/O 型进程 ＞ 计算型进程。</li>
</ol>
<h4 id="4-高响应比优先调度算法"><a href="#4-高响应比优先调度算法" class="headerlink" title="4. 高响应比优先调度算法"></a>4. 高响应比优先调度算法</h4><p>高响应比优先调度算法主要用于作业调度，是对FCFS调度算法和SJF调度算法的一种综合平衡，同时考虑了每个作业的等待时间和估计的运行时间。在每次进行作业调度时，先计算后备作业队列中每个作业的响应比，从中选出响应比最高的作业投入运行。</p>
<h4 id="5-时间片轮转调度算法"><a href="#5-时间片轮转调度算法" class="headerlink" title="5. 时间片轮转调度算法"></a>5. 时间片轮转调度算法</h4><p>先到先得，只分配一个固定时间片</p>
<h4 id="6-多级反馈队列调度算法（融合了前几种算法的优点）"><a href="#6-多级反馈队列调度算法（融合了前几种算法的优点）" class="headerlink" title="6. 多级反馈队列调度算法（融合了前几种算法的优点）"></a>6. 多级反馈队列调度算法（融合了前几种算法的优点）</h4><p>多级反馈队列调度算法是时间片轮转调度算法和优先级调度算法的综合和发展。</p>
<p>实现思想如下：</p>
<ol>
<li>设置多个就绪队列，并为各个队列赋予不同的优先级，第一级队列的优先级最高。</li>
<li>赋予各个队列中进程执行时间片的大小各不相同。在优先级越高的队列中，每个进程的运行时间片越小。</li>
<li>先把进程放在第一级末尾，时间片内未完成再放到第二级，以此类推…</li>
<li>仅当第一级队列为空，调度程序才调度第2级队列中的进程运行。</li>
</ol>
<p>优点：</p>
<p>终端型作业用户：短作业优先</p>
<p>短批处理作业用户：周转时间较短</p>
<p>长批处理作业用户：经过前面几个队列部分执行，不会长期得不到处理。</p>
<h2 id="2-3-进程同步"><a href="#2-3-进程同步" class="headerlink" title="2.3 进程同步"></a>2.3 进程同步</h2><h3 id="2-3-1-进程同步的基本概念"><a href="#2-3-1-进程同步的基本概念" class="headerlink" title="2.3.1 进程同步的基本概念"></a>2.3.1 进程同步的基本概念</h3><p>在多道程序环境下，进程是并发执行的，不同进程之间存在着不同的相互制约关系。为了协调进程之间的相互制约关系，引入了进程同步的概念。</p>
<h4 id="1-临界资源"><a href="#1-临界资源" class="headerlink" title="1. 临界资源"></a>1. 临界资源</h4><p>虽然多个进程可以共享系统中的各种资源，但其中许多资源一次都只能为一个进程所用，我们将一次仅允许一个进程使用的资源称为临界资源。许多物理设备都属于临界资源。</p>
<p>为了保证临界资源的正确使用，可把临界资源的访问分为4个部分：</p>
<ul>
<li>进入区，若能进入临界区，设置正在访问临界区的标志，以阻止其他进程同时进入临界区。</li>
<li>临界区</li>
<li>退出区，将标志清除。</li>
<li>剩余区</li>
</ul>
<h4 id="2-同步"><a href="#2-同步" class="headerlink" title="2. 同步"></a>2. 同步</h4><p>同步也称为直接制约关系，是指为完成某种任务而建立的两个或者多个进程，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递消息所产生的制约关系。进程间的直接制约关系源于它们之间的相互合作。</p>
<h4 id="3-互斥"><a href="#3-互斥" class="headerlink" title="3. 互斥"></a>3. 互斥</h4><p>互斥也称间接制约关系。当一个进程进入临界区使用临界资源时，另一个进程必须等待，当占用临界资源的进程退出临界区后，另一进程才允许去访问临界资源。</p>
<p>为禁止两个进程同时进入临界区，同步机制应遵循以下准则：</p>
<ol>
<li>空闲让进。</li>
<li>忙则等待</li>
<li>有限等待。对请求访问的进程，应保证能在有限时间内进入临界区。</li>
<li>让权等待。当进程不能进入临界区时，应立即释放处理器，防止进程忙等待。</li>
</ol>
<h3 id="2-3-2-实现临界区互斥的基本方法"><a href="#2-3-2-实现临界区互斥的基本方法" class="headerlink" title="2.3.2 实现临界区互斥的基本方法"></a>2.3.2 实现临界区互斥的基本方法</h3><h4 id="1-软件实现方法"><a href="#1-软件实现方法" class="headerlink" title="1. 软件实现方法"></a>1. 软件实现方法</h4><p>在进入区设置并检查一些标志来标明是否有进程在临界区中，若有进程在临界区，则在进入区通过循环检查进行等待，进程离开临界区后则在退出区修改标志。</p>
<ol>
<li><p>单标志法。</p>
</li>
<li><p>双标志法先检查。</p>
</li>
<li><p>双标志法后检查。</p>
</li>
<li><p>算法四：Peterson’s Algorithm。 为了防止两个进程为进入临界区而无限期等待，设置变量turn,每个进程在先设置自己的标志后再设置turn 标志。</p>
</li>
</ol>
<h4 id="2-硬件实现方法"><a href="#2-硬件实现方法" class="headerlink" title="2. 硬件实现方法"></a>2. 硬件实现方法</h4><p>通过硬件支持实现临界段问题的方法称为低级方法，或称元方法。</p>
<p>（1）中断屏蔽方法</p>
<p>当一个进程正在使用处理机执行它的临界区代码时，防止其他进程进入其临界区进行访问的最简方法是，禁止一切中断发生，或称之为屏蔽中断、关中断。</p>
<p>缺点：关中断是很方便的，但将关中断的权利交给用户则是很不明智，若一个进程关中断后不再开中断，则系统可能因此终止。</p>
<p>（2）硬件指令方法</p>
<p>TestAndSet指令。</p>
<h3 id="2-3-3-信号量"><a href="#2-3-3-信号量" class="headerlink" title="2.3.3 信号量"></a>2.3.3 信号量</h3><p>信号量机制是一种功能较强的机制，可用来解决互斥和同步问题，它只能被两个标准的原语wait(S)和signal(S)访问，也可记为“P操作”和“V操作”。原语是指完成某种功能且不被分割、不被中断执行的操作序列，通常可由硬件来实现。</p>
<h4 id="1-整型信号量"><a href="#1-整型信号量" class="headerlink" title="1. 整型信号量"></a>1. 整型信号量</h4><h4 id="2-记录型信号量"><a href="#2-记录型信号量" class="headerlink" title="2. 记录型信号量"></a>2. 记录型信号量</h4><h4 id="3-利用信号量实现同步"><a href="#3-利用信号量实现同步" class="headerlink" title="3. 利用信号量实现同步"></a>3. 利用信号量实现同步</h4><h4 id="4-利用信号量实现进程互斥"><a href="#4-利用信号量实现进程互斥" class="headerlink" title="4. 利用信号量实现进程互斥"></a>4. 利用信号量实现进程互斥</h4><h4 id="5-利用信号量实现前驱关系"><a href="#5-利用信号量实现前驱关系" class="headerlink" title="5. 利用信号量实现前驱关系"></a>5. 利用信号量实现前驱关系</h4><h4 id="6-分析进程同步和互斥问题的方法步骤"><a href="#6-分析进程同步和互斥问题的方法步骤" class="headerlink" title="6. 分析进程同步和互斥问题的方法步骤"></a>6. 分析进程同步和互斥问题的方法步骤</h4><ol>
<li>关系分析</li>
<li>整理思路</li>
<li>设置信号量</li>
</ol>
<h3 id="2-3-4-管程"><a href="#2-3-4-管程" class="headerlink" title="2.3.4 管程"></a>2.3.4 管程</h3><h4 id="1-管程的定义"><a href="#1-管程的定义" class="headerlink" title="1.管程的定义"></a>1.管程的定义</h4><p>在信号量机制中，每个要访问临界资源的进程都必须自备同步的PV操作，大量分散的同步操作给系统管理带来了麻烦，且容易因同步操作不当而导致系统死锁。于是，便产生了一种新的进程同步工具——管程。管程的特性保证了进程互斥，无须程序员自己实现互斥，从而降低了死锁发生的可能性。同时管程提供了条件变量，可以让程序员灵活地实现进程同步。</p>
<p>管程由四部分组成：</p>
<ul>
<li>管程的名称</li>
<li>局部于管程内部的共享结构数据说明。</li>
<li>对该数据结构进行操作的一组过程（或函数）</li>
<li>对局部于管程内部的共享数据设置初始值的语句。</li>
</ul>
<p>特点：</p>
<ol>
<li>管程把共享资源的操作封装起来。</li>
<li>每次仅允许一个进程进入管程，从而实现进程互斥。</li>
</ol>
<h4 id="2-条件变量"><a href="#2-条件变量" class="headerlink" title="2.条件变量"></a>2.条件变量</h4><p>当一个进程进入管程后被阻塞，直到阻塞的原因解除时，在此期间，如果该进程不是放管程，那么其他进程无法进入管程。为此，将阻塞原因定义为条件变量condition.</p>
<h4 id="2-3-5-经典同步问题"><a href="#2-3-5-经典同步问题" class="headerlink" title="2.3.5 经典同步问题"></a>2.3.5 经典同步问题</h4><h4 id="1-生产者-消费者问题"><a href="#1-生产者-消费者问题" class="headerlink" title="1. 生产者-消费者问题"></a>1. 生产者-消费者问题</h4><p>只是一个同步互斥问题的综合。</p>
<h4 id="2-读者-写者问题"><a href="#2-读者-写者问题" class="headerlink" title="2. 读者-写者问题"></a>2. 读者-写者问题</h4><p>要求：多个读者可以同时执行对文件读的操作，只允许一个写者写信息，写者完成操作之前不允许其他读者或写者工作，写者执行写操作，应当让所有读者和写者退出。</p>
<h4 id="3-哲学家进餐问题"><a href="#3-哲学家进餐问题" class="headerlink" title="3. 哲学家进餐问题"></a>3. 哲学家进餐问题</h4><h4 id="4-吸烟者问题"><a href="#4-吸烟者问题" class="headerlink" title="4. 吸烟者问题"></a>4. 吸烟者问题</h4><h2 id="2-4-死锁"><a href="#2-4-死锁" class="headerlink" title="2.4  死锁"></a>2.4  死锁</h2><h3 id="2-4-1-死锁的概念"><a href="#2-4-1-死锁的概念" class="headerlink" title="2.4.1 死锁的概念"></a>2.4.1 死锁的概念</h3><h4 id="1-死锁的定义"><a href="#1-死锁的定义" class="headerlink" title="1. 死锁的定义"></a>1. 死锁的定义</h4><p>在多道程序系统中，由于多个进程的并发执行，改善了系统资源的利用率并提高了系统的处理能力。</p>
<p>然而导致了死锁问题的产生。</p>
<p>所谓死锁是指，多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都无法向前推进。</p>
<h4 id="2-死锁产生的原因"><a href="#2-死锁产生的原因" class="headerlink" title="2. 死锁产生的原因"></a>2. 死锁产生的原因</h4><ol>
<li>系统资源的竞争</li>
<li>进程推进顺序非法</li>
<li>死锁产生的必要条件<ul>
<li>互斥条件</li>
<li>不剥夺条件</li>
<li>请求并保持条件</li>
<li>循环等待条件</li>
</ul>
</li>
</ol>
<h3 id="2-4-2-死锁的处理策略"><a href="#2-4-2-死锁的处理策略" class="headerlink" title="2.4.2 死锁的处理策略"></a>2.4.2 死锁的处理策略</h3><p>破坏四个死锁的必要条件。</p>
<h1 id="第三章-内存管理"><a href="#第三章-内存管理" class="headerlink" title="第三章 内存管理"></a>第三章 内存管理</h1><p>[考纲内容]</p>
<p>（一）内存管理概念</p>
<p>内存管理的概念；交换与覆盖；连续分配管理方式</p>
<p>（二）虚拟内存管理</p>
<p>虚拟内存的概念；请求分页管理方式；页面置换算法</p>
<p>本章围绕分页机制展开：通过分页管理方式再物理内存大小的基础上提高内存的利用率，再进一步引入请求分页管理方式，实现虚拟内存，使内存脱离物理大小的限制，从而提高处理器的利用率。</p>
<h2 id="3-1-内存管理概念"><a href="#3-1-内存管理概念" class="headerlink" title="3.1 内存管理概念"></a>3.1 内存管理概念</h2><h3 id="3-1-1-内存管理的基本管理和要求"><a href="#3-1-1-内存管理的基本管理和要求" class="headerlink" title="3.1.1 内存管理的基本管理和要求"></a>3.1.1 内存管理的基本管理和要求</h3><p>内存管理是操作系统设计中最重要和最复杂的内容复之一。</p>
<p>内存管理的功能有：</p>
<ul>
<li>内存空间的分配和回收。由操作系统完成主存储器空间的分配和管理，使程序员拜托存储分配的麻烦，提高编程效率。</li>
<li>地址转换。在多道程序环境下，程序中的逻辑地址和内存中的物理地址不可能一致，因此存储管理必须提供地址变换功能，把逻辑地址转换为相应的物理地址。</li>
<li>内存空间的扩充。利用虚拟存储技术或自动覆盖技术，从逻辑上扩充内存。</li>
<li>存储保护。保证各道作业在各自的存储空间内运行，互补干扰。</li>
</ul>
<h4 id="1-程序装入和链接。"><a href="#1-程序装入和链接。" class="headerlink" title="1. 程序装入和链接。"></a>1. 程序装入和链接。</h4><p>将用户源程序变为可在内存中执行的程序，通常需要以下几个步骤：</p>
<ul>
<li>编译</li>
<li>链接</li>
<li>装入</li>
</ul>
<p>程序链接有以下三种方式。</p>
<ul>
<li>静态链接。在程序运行之前，先将各目标模块以及他们所需的库函数连接成一个完整的可执行程序，以后不再拆开。</li>
<li>装入时动态链接。将用户源程序编译后所得到的一组目标模块，在装入内存时，采用边装入边链接的方式。</li>
<li>运行时动态链接。</li>
</ul>
<p>内存的装入模块在装入内存时，同样有三种方式：</p>
<ol>
<li>绝对装入。只适用于单道程序环境。</li>
<li>可重定位装入。</li>
<li>动态运行时装入，也称动态重定位。</li>
</ol>
<h4 id="2-逻辑地址空间与物理地址空间"><a href="#2-逻辑地址空间与物理地址空间" class="headerlink" title="2. 逻辑地址空间与物理地址空间"></a>2. 逻辑地址空间与物理地址空间</h4><p>物理地址空间是指内存中物理单元的集合，它是地址转换的最终地址，进程在运行时执行指令和访问数据，最后都要通过物理地址从主存中存取。当装入程序将可执行代码装入内存时，必须通过地址转换将逻辑地址转换为物理地址，这个过程叫做地址重定位。</p>
<h4 id="3-内存保护"><a href="#3-内存保护" class="headerlink" title="3. 内存保护"></a>3. 内存保护</h4><p>内存分配前，需要保护操作系统不受用户进程的影响，同时保护用户进程不受其他用户进程的影响。内存保护可采取两种方法：</p>
<ol>
<li>在CPU设置一对上、下限寄存器。</li>
<li>采用重定位寄存器和界地址寄存器来实现保护。</li>
</ol>
<h3 id="3-1-2-覆盖与交换"><a href="#3-1-2-覆盖与交换" class="headerlink" title="3.1.2 覆盖与交换"></a>3.1.2 覆盖与交换</h3><p>覆盖与交换技术是在多道程序环境下用来扩充内存的两种办法。</p>
<ol>
<li><p>覆盖</p>
<p>由于程序运行时并非任何时候都要访问程序及数据的各个部分（尤其是大程序），因此可把用户空间分成一个固定区和若干覆盖区。将经常活跃的部分放在固定区，其余部分按调用关系分段。</p>
<p>特点：打破了必须将一个进程的全部信息装入主存后才能运行的限制，但当时运行程序的代码量大于主存时仍不能运行，此外，内存中能够更新的地方只有覆盖区的段，不在覆盖区中的段会常驻内存。</p>
</li>
<li><p>交换</p>
<p>交换的基本思想是，把处于等待状态的程序从内存移到辅存，把内存空间腾出来，这一过程又称为换出；把准备好竞争CPU运行的程序从辅存移到内存，这一过程又称换入。</p>
</li>
</ol>
<h3 id="3-1-3-连续分配管理方式"><a href="#3-1-3-连续分配管理方式" class="headerlink" title="3.1.3 连续分配管理方式"></a>3.1.3 连续分配管理方式</h3><p>连续分配管理方式是指为一个用户程序分配一个连续的内存空间，比如某用户需要1GB的内存空间，连续分配方式就在内存空间为用户分配一块连续的1GB空间。连续分配方式主要包括单一连续分配、固定分区分配和动态分区分配。</p>
<h4 id="1-单一连续分配"><a href="#1-单一连续分配" class="headerlink" title="1. 单一连续分配"></a>1. 单一连续分配</h4><p>优点：简单、无外部碎片，可以采用覆盖技术，不需要额外的技术支持。缺点：只能用于单用户、单任务的操作系统中，有内部碎片，存储器的利用率极低。</p>
<h4 id="2-固定分区分配"><a href="#2-固定分区分配" class="headerlink" title="2. 固定分区分配"></a>2. 固定分区分配</h4><p>固定分区分配是最简单的一种多道程序存储管理方式，它将用户内存空间划分为若干固定大小的区域，每个分区只装入一道作业。当有空闲分区时，便可再从外存的后备作业队列中选择适当大小的作业装入该分区，如此循环。</p>
<p>方法：</p>
<ul>
<li><p>分区大小相等</p>
</li>
<li><p>分区大小不等</p>
<p>这种分区方式存在两个问题：一是程序可能太大而放不进任何一个分区中，这时用户不得不使用覆盖技术来使用内存空间；二是主存利用率低，当程序小于固定分区大小时，也占用一个完整的内存分区空间，这样分区内部就存在空间浪费，这种现象称为内部碎片。</p>
<p>固定分区可用于多道程序设计的最简单的存储分配，无外部碎片，但不能实现多进程共享一个主存区，所以存储空间利用率低。固定分区分配很少用于现在通用的操作系统中，但在某些用于控制多个相同对象的控制系统中仍发挥着一定的作用。</p>
</li>
</ul>
<h4 id="3-动态分区分配"><a href="#3-动态分区分配" class="headerlink" title="3. 动态分区分配"></a>3. 动态分区分配</h4><p>动态分区分配又称可变分区分配，是一种动态划分内存的区分方法。这种分区方法不预先划分内存，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好合适进程的需要。因此，系统中的分区的大小和数目是可变的。</p>
<p>动态分区在开始分配时是很好的，但之后会导致内存中出现许多小的内存块。随着时间的推移，内存中会产生越来越多的碎片，内存的利用率随之下降。这些小的内存块称为外部碎片，指在所有分区外的存储空间会变成越来越多的碎片。克服外部碎片需要通过紧凑技术来解决，即操作系统不时地对进程进行移动和整理。</p>
<p>但这需要动态重定位寄存器的支持，且相对费时。</p>
<p>在进程装入活换入主存时，若内存中又多个足够大的空闲块，则操作系统必须确定分配哪个内存块给进程使用，这就是动态分区的分配策略。</p>
<ol>
<li>首次适应算法。顺序查到第一个满足的</li>
<li>最佳适应算法。按容量递增排序，找到第一个满足的。</li>
<li>最坏适应算法。按容量递减排序，找到第一个满足的。</li>
<li>邻近适应算法。又称循环首次适应算法。分配内存时从上次查找结束的位置开始继续查找。</li>
</ol>
<h3 id="3-1-4-非连续分配管理方式"><a href="#3-1-4-非连续分配管理方式" class="headerlink" title="3.1.4 非连续分配管理方式"></a>3.1.4 非连续分配管理方式</h3><p>非连续分配管理方式根据分区的大小是否固定，分为分页存储管理方式和分段存储管理方式。</p>
<h4 id="1-分页存储管理方式"><a href="#1-分页存储管理方式" class="headerlink" title="1. 分页存储管理方式"></a>1. 分页存储管理方式</h4><p>分页存储管理方式中，根据运行作业时是否要把作业的所有页面都撞入内存才能运行，分为基本分页存储管理方式和请求分页存储管理方式。</p>
<ol>
<li><p>分页存储的基本概念</p>
<p>把主存空间划分为大小相等且固定的块，块相对较小，作为主存的基本单位。每个进程也以块为单位进行划分，进程在执行时，以块为单位逐个申请主存中的块空间。</p>
<p>分页存储的基本概念：</p>
<ul>
<li>页面和页面大小。进程中的块称为页，内存中的块称为页框。外村中直接称为块。页面大小应当适中。</li>
<li>地址结构</li>
<li>页表。为了方便内存中找到进程的每个页面对应的物理块，系统为每个进程建立一张页表，它记录页面正在内存中对应的物理块号，页表一般存放在内存中。</li>
</ul>
</li>
<li><p>基本地址变换结构。</p>
<p>页表项的作用是找到该页在内存中的位置。</p>
<p>分页管理方式存在的两个主要问题：</p>
<ul>
<li>每次访存操作都需要进行逻辑地址到物理地址的转换，地址转换过程必须足够块，否则访存速度会下降</li>
<li>每个进程引入页表，用于内存映射机制，页表不能太大，否则内存利用率会降低。</li>
</ul>
</li>
<li><p>具有快表的地址变换机构</p>
</li>
<li><p>两级页表</p>
</li>
</ol>
<h4 id="2-基本分段存储管理方式"><a href="#2-基本分段存储管理方式" class="headerlink" title="2. 基本分段存储管理方式"></a>2. 基本分段存储管理方式</h4><p>分页管理方式是从计算机的角度考虑设计的，目的是提高内存的利用率，提升计算机的性能。分页通过硬件机制实现，对用户完全透明。分段管理方式的提出则考虑了用户和程序员，以满足方便编程、信息保护和共享、动态增长以及动态链接等多方面的需要。</p>
<ul>
<li>分段</li>
<li>段表</li>
<li>地址变换机构</li>
<li>段的共享和保护</li>
</ul>
<h4 id="3-段页式管理方式"><a href="#3-段页式管理方式" class="headerlink" title="3. 段页式管理方式"></a>3. 段页式管理方式</h4><p>页式存储管理能有效的提高内存利用率，而分段存储管理能反应程序的逻辑结构并有利于段的共享。将这两种存储管理方法结合起来，便形成了段页式存储管理方式。</p>
<p>在一个进程中，段表只有一个，而页表可能有多个。</p>
<p>段页式管理的地址空间是二维的。</p>
<h2 id="3-2-虚拟内存管理"><a href="#3-2-虚拟内存管理" class="headerlink" title="3.2 虚拟内存管理"></a>3.2 虚拟内存管理</h2><h3 id="3-2-1-虚拟内存的基本概念"><a href="#3-2-1-虚拟内存的基本概念" class="headerlink" title="3.2.1 虚拟内存的基本概念"></a>3.2.1 虚拟内存的基本概念</h3><h4 id="1-传统存储管理方式的特征"><a href="#1-传统存储管理方式的特征" class="headerlink" title="1. 传统存储管理方式的特征"></a>1. 传统存储管理方式的特征</h4><ul>
<li><p>一次性</p>
<p>作业必须一次性全部装入内存后，才能开始运行。</p>
</li>
<li><p>驻留性</p>
<p>作业被装入内存后，就一直驻留在内存中，其任何部分都不会被换出。</p>
</li>
</ul>
<h4 id="2-局部性原理"><a href="#2-局部性原理" class="headerlink" title="2. 局部性原理"></a>2. 局部性原理</h4><blockquote>
<p>Bill Joy说过：”在研究所时，我经常开玩笑地说高速缓存是计算机科学中唯一重要的思想。事实上，高速缓存技术确实极大地影响了计算机系统的设计。”块表、页高速缓存及虚拟内存技术从广义上讲，都属于高速缓存技术。这个技术所依赖的原理就是局部性原理。</p>
</blockquote>
<p>局部性原理表现在两个方面。</p>
<ol>
<li>时间局部性。</li>
<li>空间局部性。</li>
</ol>
<p>时间局部性通过将近来使用的指令和数据保存到高速缓冲存储器中，并使用高速缓存的层次结构实现。空间局部性通常使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。虚拟内存技术实际上建立了“内存-外存”的两级存储器结构，利用局部性原理实现高速缓存。</p>
<h4 id="3-虚拟存储器的定义和特征"><a href="#3-虚拟存储器的定义和特征" class="headerlink" title="3. 虚拟存储器的定义和特征"></a>3. 虚拟存储器的定义和特征</h4><p>虚拟存储器主要有三个主要特征：</p>
<ol>
<li><p>多次性。多次性是指无须在作业运行时一次性地全部装入内存，而允许被分成多次调入内存运行。</p>
</li>
<li><p>对换性。允许在作业的运行过程中，进行换进和换出。</p>
</li>
<li><p>虚拟性。虚拟性是指从逻辑上扩充内存的容量，使用户所看到的内存容量远大于实际的内存容量。</p>
</li>
</ol>
<h4 id="4-虚拟内存技术的实现"><a href="#4-虚拟内存技术的实现" class="headerlink" title="4. 虚拟内存技术的实现"></a>4. 虚拟内存技术的实现</h4><ul>
<li>请求分页存储管理</li>
<li>请求分段存储管理</li>
<li>请求段页式存储管理</li>
</ul>
<p>不管哪种方式，都需要一定的硬件支持。一般需要的支持有以下几个方面</p>
<ul>
<li>一定容量的内存和外存</li>
<li>页表机制（或段表机制），作为主要的数据结构</li>
<li>中断机构，当用户程序要访问的部分尚未调入内存时，则产生中断。</li>
</ul>
<h3 id="3-2-2-请求分页管理方式"><a href="#3-2-2-请求分页管理方式" class="headerlink" title="3.2.2 请求分页管理方式"></a>3.2.2 请求分页管理方式</h3><h4 id="1-页表机制"><a href="#1-页表机制" class="headerlink" title="1. 页表机制"></a>1. 页表机制</h4><p>请求分页系统的页表项：</p>
<p>页号、物理块号、状态位、访问字段、修改位、外存地址</p>
<h4 id="2-缺页中断机构"><a href="#2-缺页中断机构" class="headerlink" title="2. 缺页中断机构"></a>2. 缺页中断机构</h4><h4 id="3-地址变换机构"><a href="#3-地址变换机构" class="headerlink" title="3. 地址变换机构"></a>3. 地址变换机构</h4><h3 id="3-2-3-页面置换算法（决定应该换入哪页、换出哪页）"><a href="#3-2-3-页面置换算法（决定应该换入哪页、换出哪页）" class="headerlink" title="3.2.3 页面置换算法（决定应该换入哪页、换出哪页）"></a>3.2.3 页面置换算法（决定应该换入哪页、换出哪页）</h3><p>常见的置换算法有4种。</p>
<h4 id="1-最佳（OPT）置换算法"><a href="#1-最佳（OPT）置换算法" class="headerlink" title="1. 最佳（OPT）置换算法"></a>1. 最佳（OPT）置换算法</h4><p>最佳置换算法选择的是被爆胎页面是以后永不使用的页面，或是在最长时间内不再被访问的页面，以便保证获得最低的缺页率。</p>
<h4 id="2-先进先出（FIFO）页面置换算法"><a href="#2-先进先出（FIFO）页面置换算法" class="headerlink" title="2. 先进先出（FIFO）页面置换算法"></a>2. 先进先出（FIFO）页面置换算法</h4><p>优先淘汰最早进入内存的页面，即在内存种驻留时间最久的页面。</p>
<p>FIFO算法还会产生所分配的物理块数增大而页故障数不减反增的异常现象。</p>
<h4 id="3-最近最久未使用（LRU）置换算法"><a href="#3-最近最久未使用（LRU）置换算法" class="headerlink" title="3. 最近最久未使用（LRU）置换算法"></a>3. 最近最久未使用（LRU）置换算法</h4><p>选择最近最长时间未访问过的页面予以淘汰，它认为过去一段时间内未访问过的页面，在最近的将来也可能不会被访问。</p>
<h4 id="4-时钟置换算法"><a href="#4-时钟置换算法" class="headerlink" title="4. 时钟置换算法"></a>4. 时钟置换算法</h4><p>LRU算法的性能接近于OPT算法，但实现起来比较困难，且开销大；FIFO算法实现简单，但性能差。因此，操作系统的设计者尝试了很多的算法，试图用比较小的开销接近LRU算法的性能，这类算法都是CLOCK算法的变体。因为算法要循环扫描缓冲区，像时钟的指针一样转动，所以称为CLOCK算法。</p>
<h3 id="3-2-4-页面分配策略"><a href="#3-2-4-页面分配策略" class="headerlink" title="3.2.4 页面分配策略"></a>3.2.4 页面分配策略</h3><h4 id="1-驻留集大小"><a href="#1-驻留集大小" class="headerlink" title="1. 驻留集大小"></a>1. 驻留集大小</h4><p>对于分页式的虚拟内存，在进程准备执行时，不需要也不可能把一个进程的所有页都读入主存。因此，操作系统必须决定读取多少页，即决定给特定的进程分配几个页框。给一个进程分配的物理页框的集合就是这个进程的驻留集。需要考虑以下几点：</p>
<ol>
<li>分配给一个进程的存储量越小，任何时候驻留在主存中的进程数就越多，从而可以提高处理机的时间利用效率。</li>
<li>若一个进程在主存中的页数过少，尽管有局部性原理，页错误率仍然相对较高。</li>
<li>若页数过多，则由于局部性原理，给特定的进程分配更多的主存空间对该进程的错误率没有明显的影响。</li>
</ol>
<p>基于这些因素，先到操作系统通常采用三种策略：</p>
<ol>
<li>固定分配局部置换。</li>
<li>可变分配全局置换。</li>
<li>可变分配局部置换。</li>
</ol>
<h4 id="2-调入页面的时机"><a href="#2-调入页面的时机" class="headerlink" title="2. 调入页面的时机"></a>2. 调入页面的时机</h4><ol>
<li>预调页策略。</li>
<li>请求调页策略。</li>
</ol>
<h4 id="3-从何处调入页面"><a href="#3-从何处调入页面" class="headerlink" title="3. 从何处调入页面"></a>3. 从何处调入页面</h4><ul>
<li>系统拥有足够的对换区空间。</li>
<li>系统缺少足够的对换区空间。</li>
<li>UNIX方式。</li>
</ul>
<h3 id="3-2-5-抖动"><a href="#3-2-5-抖动" class="headerlink" title="3.2.5 抖动"></a>3.2.5 抖动</h3><p>在页面置换过程中，一种糟糕的情形是，刚刚换出的页面马上又要换入主存，刚刚换入的页面马上又要换入主存，这种频繁的页面调度行为称为抖动或者颠簸。若一个进程在换页上用的时间多于执行时间，则这个进程就在颠簸。</p>
<h3 id="3-2-6-工作集"><a href="#3-2-6-工作集" class="headerlink" title="3.2.6 工作集"></a>3.2.6 工作集</h3><p>工作集是指在某段时间间隔内，进程要访问的页面集合。基于局部性原理，可以用最近访问过的页面来确定工作集。一般来说，工作集W可由时间t和工作集窗口来决定。</p>
<h3 id="3-2-7-地址翻译"><a href="#3-2-7-地址翻译" class="headerlink" title="3.2.7 地址翻译"></a>3.2.7 地址翻译</h3>]]></content>
  </entry>
  <entry>
    <title>计算机网络——应用层笔记</title>
    <url>/2021/10/14/blog13/</url>
    <content><![CDATA[<h1 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h1><p>考纲内容：</p>
<p>一，网络应用模型</p>
<p>客户/服务器模型：P2P模型</p>
<p>二、域名系统DNS</p>
<p>层次域名空间；域名服务器；域名解析过程</p>
<p>三、文件传送协议FTP</p>
<p>FTP协议的工作原理；控制连接和数据连接</p>
<p>四、电子邮件EMAIL</p>
<p>电子邮件系统的组成结构；电子邮件格式与MIME；SMTP协议与POP3协议</p>
<p>五、万维网WWW</p>
<p>WWW的概念与组成结构；HTTP协议</p>
<h2 id="6-1-网络应用模型"><a href="#6-1-网络应用模型" class="headerlink" title="6.1 网络应用模型"></a>6.1 网络应用模型</h2><h3 id="6-1-1-客户-服务器模型"><a href="#6-1-1-客户-服务器模型" class="headerlink" title="6.1.1 客户/服务器模型"></a>6.1.1 客户/服务器模型</h3><p>在客户/服务器模型中，有一个总是打开的主机称为服务器，它服务于许多来自其他称为客户机的主机请求。其工作流程是：</p>
<ol>
<li>服务器处于接受请求的状态。</li>
<li>客户机发出服务请求，并等待接受结果。</li>
<li>服务器收到请求后，分析请求，进行必要的处理，得到结果并发送给客户机。</li>
</ol>
<p>服务器程序不需要直到客户程序的地址。</p>
<p>客户/服务器模型的主要特点还有：</p>
<ol>
<li>网络中各计算机地位不平等。服务器可以通过对用户权限的限制来达到管理客户机的目的，使它们不能随意存储/删除数据，或进行其他有限的网络活动。整个网络的管理工作由少数服务器担当，故网络的管理非常集中和方便。</li>
<li>客户机之间不直接通信。</li>
<li>可扩展性不佳。受服务器硬件和网络带宽的限制，服务器支持的客户机数有限。</li>
</ol>
<h3 id="6-1-2-P2P模型"><a href="#6-1-2-P2P模型" class="headerlink" title="6.1.2 P2P模型"></a>6.1.2 P2P模型</h3><p>P2P的思想是整个网络中的传输内容不再被保存在中心服务器上，每个结点都同时具有下载、上传的功能，其权利和义务都是大体对等的。</p>
<p>P2P模型的优点主要体现在：</p>
<ol>
<li><p>减轻了服务器的计算压力，消除了对某个服务器的完全依赖，可以将任务分配到各个结点上，因此大大提高了系统效率和资源利用率。</p>
</li>
<li><p>多个客户机之间可以直接共享文档。</p>
</li>
<li><p>可扩展性好，传统服务器有响应和带宽的限制，因此只能接受一定数量的请求。</p>
</li>
<li><p>网络健壮性强，单个结点的失效也不会影响其他部分的结点。</p>
</li>
</ol>
<p>P2P模型也有缺点，在获取服务的同时，还要给其他结点提供服务，因此会占用较多的内存，影响整机速度。</p>
<p>使网络变的拥塞，因此各大ISP通常都对P2P持反对态度。</p>
<h2 id="6-2-DNS-系统"><a href="#6-2-DNS-系统" class="headerlink" title="6.2 DNS 系统"></a>6.2 DNS 系统</h2><p>域名系统DNS（Domain Name System)是因特网使用的命名系统，用来把便于人们记忆的含有特定含义的主机名转换称便于机器处理的IP地址。DNS系统采用客户/服务器模型，其协议运行在UDP之上，使用53号端口。</p>
<p>从概念上可将DNS分为3个部分：层次域名空间、域名服务器和解析器。</p>
<h3 id="6-2-1-层次域名空间"><a href="#6-2-1-层次域名空间" class="headerlink" title="6.2.1 层次域名空间"></a>6.2.1 层次域名空间</h3><p>任何一个连接在因特网上的主机或路由器，都有一个唯一的层次结构的名字，即域名。域是名字空间中一个可被管理的划分。域还可分为子域，顶级域，二级域，三级域等等。</p>
<h3 id="6-2-2-域名服务器"><a href="#6-2-2-域名服务器" class="headerlink" title="6.2.2 域名服务器"></a>6.2.2 域名服务器</h3><h4 id="1-根域名服务器"><a href="#1-根域名服务器" class="headerlink" title="1. 根域名服务器"></a>1. 根域名服务器</h4><h4 id="2-顶级域名服务器"><a href="#2-顶级域名服务器" class="headerlink" title="2. 顶级域名服务器"></a>2. 顶级域名服务器</h4><h4 id="3-授权域名服务器"><a href="#3-授权域名服务器" class="headerlink" title="3. 授权域名服务器"></a>3. 授权域名服务器</h4><h4 id="4-本地域名服务器"><a href="#4-本地域名服务器" class="headerlink" title="4. 本地域名服务器"></a>4. 本地域名服务器</h4><h3 id="6-2-3-域名解析过程"><a href="#6-2-3-域名解析过程" class="headerlink" title="6.2.3 域名解析过程"></a>6.2.3 域名解析过程</h3><p>域名解析是指把域名映射成为IP地址或把IP地址映射为域名的过程。前者称为正向解析，后者称为反向解析。</p>
<h2 id="6-3-文件传输协议FTP"><a href="#6-3-文件传输协议FTP" class="headerlink" title="6.3 文件传输协议FTP"></a>6.3 文件传输协议FTP</h2><h3 id="6-3-1-FTP的工作原理"><a href="#6-3-1-FTP的工作原理" class="headerlink" title="6.3.1 FTP的工作原理"></a>6.3.1 FTP的工作原理</h3><p>文件传输协议FTP是因特网上使用最广泛的文件传送协议。FTP提供交互式的访问，允许客户指明文件的类型和格式，并允许文件具有存取权限。它屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</p>
<p>FTP提供以下功能：</p>
<ol>
<li>提供不同种类主机系统（硬、软件体系都可不同）之间的文件传输能力。</li>
<li>以用户权限管理的方式提供用户对远程FTP服务器上的文件管理能力。</li>
<li>以匿名FTP的方式提供公用文件共享的能力。</li>
<li>FTP采用客户/服务器的工作方式，它使用TCP可靠的传输服务。</li>
</ol>
<p>FTP的服务器主要由两大部分组成：一个主进程，负责接受新的请求；另外由若干个从属进程，负责处理单个请求。其工作步骤如下：</p>
<ol>
<li>打开熟知端口21，使客户进程能够连上</li>
<li>等待客户进程发连接请求</li>
<li>启动从属进程来处理客户进程发来的请求。主进程与从属进程并发执行，从属进程对客户进程的请求处理完毕后即终止。</li>
<li>回到等待状态，继续接受其他客户进程的请求。</li>
</ol>
<h3 id="6-3-2-控制连接与数据连接"><a href="#6-3-2-控制连接与数据连接" class="headerlink" title="6.3.2 控制连接与数据连接"></a>6.3.2 控制连接与数据连接</h3><p>FTP在工作时使用两个并行的TCP连接，一个是控制连接（端口号21）,一个是数据连接（端口号20）。使用两个不同的端口号可使协议更加简单和更容易实现。</p>
<h4 id="1-控制连接"><a href="#1-控制连接" class="headerlink" title="1. 控制连接"></a>1. 控制连接</h4><h4 id="2-数据连接"><a href="#2-数据连接" class="headerlink" title="2. 数据连接"></a>2. 数据连接</h4><h2 id="6-4-电子邮件"><a href="#6-4-电子邮件" class="headerlink" title="6.4 电子邮件"></a>6.4 电子邮件</h2><h3 id="6-4-1-电子邮件系统的组成结构"><a href="#6-4-1-电子邮件系统的组成结构" class="headerlink" title="6.4.1 电子邮件系统的组成结构"></a>6.4.1 电子邮件系统的组成结构</h3><p>电子邮件系统应具有三个最主要的组成构件，分别是用户代理，邮件服务器和电子邮件使用的协议，如SMTP，POP3(或IMAP)等。</p>
<p>下面简单地介绍下电子邮件的收发过程。</p>
<ol>
<li>发信人调用用户代理来撰写和编辑要发送的邮件。用户代理用SMTP协议把邮件传送给发送方邮件服务器。</li>
<li>发送方邮件服务器将邮件放入邮件缓存队列中，等待发送。</li>
<li>运行在发送方邮件放入邮件缓存队列中，等待发送。</li>
<li>TCP连接建立后，SMTP客户进程开始向原程的SMTP服务器进程发送邮件。当所有的待发送邮件发完了，SMTP就关闭所建立的TCP连接。</li>
<li>运行在接收方邮件服务器的SMTP服务器进程收到邮件后，将邮件放入收信人的用户邮箱中，等待收信人在方便时进行读取。</li>
<li>收信人在打算收信时，调用用户代理，使用POP3(IMAP)协议将自己的邮件从接收方邮件服务器的用户邮箱中的取回。</li>
</ol>
<h3 id="6-4-2-电子邮件格式与MIME"><a href="#6-4-2-电子邮件格式与MIME" class="headerlink" title="6.4.2 电子邮件格式与MIME"></a>6.4.2 电子邮件格式与MIME</h3><h4 id="1-电子邮件格式"><a href="#1-电子邮件格式" class="headerlink" title="1. 电子邮件格式"></a>1. 电子邮件格式</h4><h4 id="2-MIME（多用途网际邮件扩充）"><a href="#2-MIME（多用途网际邮件扩充）" class="headerlink" title="2. MIME（多用途网际邮件扩充）"></a>2. MIME（多用途网际邮件扩充）</h4><h3 id="6-4-3-SMTP协议和POP3协议"><a href="#6-4-3-SMTP协议和POP3协议" class="headerlink" title="6.4.3 SMTP协议和POP3协议"></a>6.4.3 SMTP协议和POP3协议</h3><h2 id="6-5-万维网WWW"><a href="#6-5-万维网WWW" class="headerlink" title="6.5 万维网WWW"></a>6.5 万维网WWW</h2><h3 id="6-5-1-概念和组成结构"><a href="#6-5-1-概念和组成结构" class="headerlink" title="6.5.1 概念和组成结构"></a>6.5.1 概念和组成结构</h3><p>万维网的内核部分是由三个标准构成的：</p>
<ol>
<li>统一资源定位符（URL），负责标识万维网上的各种文档，并使每个文档在整个万维网的范围内具有唯一的标识符URL。</li>
<li>超文本传输协议（HTTP），它是一个应用层协议，使用TCP连接进行可靠的传输，HTTP是万维网客户程序和服务器程序之间交互所必须遵守的协议。</li>
<li>超文本标记语言（HTML）是一种文档结构的标记语言，使用一些约定的标记对页面上的各种信息（包括文字、声音、图像、视频等）、格式进行描述。</li>
</ol>
<p>万维网以客户/服务器方式工作。浏览器是在用户计算机上的万维网客户程序，而万维网文档所驻留的计算机则运行服务器程序，这个计算机称万维网服务器。客户程序向服务器程序法处请求，服务器程序向客户程序送回客户所要的文档。</p>
<h3 id="6-5-2-超文本传输协议HTTP"><a href="#6-5-2-超文本传输协议HTTP" class="headerlink" title="6.5.2 超文本传输协议HTTP"></a>6.5.2 超文本传输协议HTTP</h3>]]></content>
  </entry>
  <entry>
    <title>人工智能安全——学习笔记</title>
    <url>/2021/10/29/blog14/</url>
    <content><![CDATA[<h1 id="人工智能安全学习笔记"><a href="#人工智能安全学习笔记" class="headerlink" title="人工智能安全学习笔记"></a>人工智能安全学习笔记</h1>]]></content>
  </entry>
  <entry>
    <title>1.29  Educational Codeforces Round 81</title>
    <url>/2021/09/24/blog2/</url>
    <content><![CDATA[<h3 id="A-Display-The-Number"><a href="#A-Display-The-Number" class="headerlink" title="A Display The Number"></a>A <a href="https://codeforces.com/contest/1295/problem/A">Display The Number</a></h3><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>数字屏上0-9数字点亮分别需要不同的段、给定一定段，问能够点亮的最大的数字是几</p>
<h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>对于偶数段 ，则最大数字的每一位都是1就可以，对于奇数段，令第一位数字是7，之后全都是1即可</p>
<h3 id="B-Infinite-Prefixes"><a href="#B-Infinite-Prefixes" class="headerlink" title="B Infinite Prefixes"></a>B <a href="https://codeforces.com/contest/1295/problem/B">Infinite Prefixes</a></h3><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>有一个长度为n的01串，可以无限次叠加，定义一个前缀01差：前$i$项中0比1多的个数，问有多少个前缀01差等于$m$</p>
<h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>每一个串存在一个$u$,即整串的前缀01差，无限前缀能组成的数字仅有前$n$项前缀01差及无限u的叠加</p>
<p>（注意考虑特殊条件） <del>不考虑就hack</del></p>
<h3 id="C-Obtain-The-String"><a href="#C-Obtain-The-String" class="headerlink" title="C Obtain The String"></a>C <a href="https://codeforces.com/contest/1295/problem/C">Obtain The String</a></h3><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>有两个小写字母字符串$s$和$t$,定义操作：每次可将s的一个非连续子串取出，求最小的操作数$n$,可使得$n$次得到的子串连续成为字符串$t$</p>
<h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><p>直接贪心，利用子序列自动机加速</p>
<p>将26个字母保存1个$nex$二维数组，$nex_{ij}$表示第$s$在第$i$个位置后的字母$j $第一次出现的位置,我们在求解过程中：</p>
<p>首先查找t的第一个字母在s中第一次出现的位置，即$nex_{0,t_1}$,找到第一个字母后，寻找t的第二个字母的过程就是在$s$中$t$的第一个字母的位置后继续寻找第一次出现第二个字母的位置，以此类推，若是找不到，则操作数++，重新寻找</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100005</span>],t[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">100005</span>][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)nxt[n][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)nxt[i][j]=nxt[i+<span class="number">1</span>][j];</span><br><span class="line">            nxt[i][s[i+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            now=nxt[now][t[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(!now)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                now=nxt[now][t[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span>(!now)&#123;ans=<span class="number">-1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="D-Same-GCDs"><a href="#D-Same-GCDs" class="headerlink" title="D Same GCDs"></a>D <a href="https://codeforces.com/contest/1295/problem/D">Same GCDs</a></h3><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定$a,m$,计算$\sum\limits_{i = 0}^{m - 1} {[\gcd (a,m) =  = \gcd (a + i,m)]} $</p>
<h5 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h5><p>$gcd (a,m) = d \to \gcd (\frac{a}{d},\frac{m}{d}) = 1$</p>
<p>则原式可化为</p>
<p>…</p>
<p>直接求欧拉函数即可</p>
<h3 id="E-Permutation-Separation"><a href="#E-Permutation-Separation" class="headerlink" title="E Permutation Separation"></a>E <a href="https://codeforces.com/contest/1295/problem/E">Permutation Separation</a></h3><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><p>给一个排列，每个排列中的第$i$个数字为$p_i$,权值为$w_i$.你可以选择一个位置切一刀把它分成左右两部分，然后你可以花费$w_i$把$p_i$移动到另一个部分。最终要保证左半部分的最大值小于右半部分的最小值。</p>
<h5 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h5><p>基础还是太弱，看了半天题解感觉终于明白了</p>
<p>首先暴力解法：就是枚举将左右集合分开的位置，然后枚举边界x,使得左边集合大于x的数与右边集合小于x的数花费和最小</p>
<p>线段树解法：</p>
<p>线段树是将枚举的边界x作为叶子节点的</p>
<p>如果能够确定切的位置  左边集合与右边集合均已经确定，每一个叶子节点x保存的是当前集合下以x为边界所需花费，由于线段树维护的是最小值，全局最小值就是当前确定集合的最小花费。</p>
<p>如何更新：</p>
<p>当集合发生改变时，比如说左边集合中新增了右边集合的$y$,权值为$w$,则当前集合下的最优解法中的以比y小的边界均需要将y移动到右边,区间增加$w$，比y大的边界则会略去这一步骤，即区间减去$w$</p>
]]></content>
  </entry>
  <entry>
    <title>计算机网络学习笔记（一）</title>
    <url>/2021/09/25/blog4/</url>
    <content><![CDATA[<h2 id="第一章-计算机网络体系结构"><a href="#第一章-计算机网络体系结构" class="headerlink" title="第一章 计算机网络体系结构"></a>第一章 计算机网络体系结构</h2><h3 id="1-1-计算机网络概述"><a href="#1-1-计算机网络概述" class="headerlink" title="1.1 计算机网络概述"></a>1.1 计算机网络概述</h3><p><strong>Q</strong>: 集线器是什么？</p>
<p><strong>A</strong>：集线器是一款网络设备，将多条以太网双绞线或者光纤连接在同一段物理介质下。集线器会广播式发送数据，数据信息会被发送到每一个端口（不安全）; 各站点共享带宽，使得平均带宽减小；工作站不能同时发送和接受数据。</p>
<p><strong>Q</strong>：<strong>网桥</strong>是什么？ （<strong>网桥也叫做桥接器</strong>）</p>
<p><strong>A</strong>：网桥将两个相似的网络连接起来，并对网络数据的流通进行管理。它工作于<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">数据链路层</a>，不但能扩展网络的距离或范围，而且可提高网络的性能、可靠性和安全性。网络1 和网络2 通过网桥连接后，网桥接收网络1 发送的数据包，检查数据包中的地址，如果地址属于网络1 ，它就将其放弃，相反，如果是网络2 的地址，它就继续发送给网络2.这样可利用网桥隔离信息，将同一个网络号划分成多个网段（属于同一个网络号），隔离出安全网段，防止其他网段内的用户非法访问。由于网络的分段，各网段相对独立（属于同一个网络号），一个网段的故障不会影响到另一个网段的运行。</p>
<p><strong>Q</strong>: 如何理解<strong>子网掩码</strong>？</p>
<p><strong>A</strong>: <a href="https://www.zhihu.com/question/56895036">直接点链接</a></p>
<p>附加一些个人理解：</p>
<p>内网中192.168.1.199的前三组是网络号，后一组是主机号，子网掩码就是255.255.255.0</p>
<p>目的：为使得所有主机可以完成通信，需要通过 IP 地址和子网掩码按位与得到的值相同。</p>
<p>方法：子网掩码最后一位为0，可以使得256个主机实现互联。</p>
<blockquote>
<p><strong>要说明的是</strong>：不是某个IP的网络号和主机号决定子网掩码是什么，而是子网掩码决定了某个IP地址的网络号与主机号是什么，IP地址是要搭配子网掩码使用的。例如上面的子网掩码决定了192.168.1.199的前三段192.168.1是网络号，最后一段199是主机号。</p>
</blockquote>
<p><strong>Q</strong>: <strong>网关</strong>是什么？</p>
<p><strong>A</strong>: <a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3/98992">百度百科介绍</a></p>
<h3 id="1-2-计算机网络体系结构与参考模型"><a href="#1-2-计算机网络体系结构与参考模型" class="headerlink" title="1.2 计算机网络体系结构与参考模型"></a>1.2 计算机网络体系结构与参考模型</h3><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><p>[考纲内容] </p>
<p>（通信基础）</p>
<p>信道、信号、带宽、码元、波特、速率、信源、信宿等基本概念</p>
<p>奈奎斯特定理和香农定理；编码与调制</p>
<p>电路交换、报文交换和分组交换；数据报和虚电路</p>
<p>（传输介质）</p>
<p>双绞线、同轴电缆、光纤与无线传输介质；物理层接口的特性</p>
<p>（物理层设备）</p>
<p>中继器、集线器</p>
<h3 id="2-1-通信基础"><a href="#2-1-通信基础" class="headerlink" title="2.1 通信基础"></a>2.1 通信基础</h3><ul>
<li><p>数据</p>
<p>数据是指传送信息的实体。</p>
</li>
<li><p>码元</p>
<p>码元是指用一个固定时长的信号波形表示一位k进制数字，代表不同离散数值的基本波形。1码元可以携带多个比特的信息量。</p>
</li>
<li><p>信源</p>
<p>产生和发送数据的源头。</p>
</li>
<li><p>信宿</p>
<p>接受数据的终点。</p>
</li>
<li><p>信道</p>
<p>信道是信号的传输媒介。</p>
</li>
<li><p>速率</p>
<p>数据率，指数据的传输速率，表示单位时间内传输的数据量。</p>
<ul>
<li>码元传输速率。表示单位时间内数字通信系统所传输的码元个数。</li>
<li>信息传输速率。表示单位时间内数字通信系统所传输的二进制码元个数（即比特数）。单位是比特每秒。</li>
</ul>
</li>
<li><p>带宽</p>
<p>带宽表示单位时间内从网络上的某一点到另一点的所能通过的最高数据率。单位是 b/s,或bit/s.</p>
</li>
</ul>
<p>从通信双方信息的<strong>交互方式</strong>看，可以有三种基本方式：</p>
<ul>
<li><strong>单工通信</strong>。只有一个方向的的通信而没有反方向的交互，仅需要一条信道。无线电广播、电视广播。</li>
<li><strong>半双工通信</strong>。通信的双方都可以发送和接受信息，但任何一方都不能同时发送和接受。</li>
<li><strong>全双工通信</strong>。通信双方可以同时发送和接受信息，也需要两条信道</li>
</ul>
<p><strong>奈奎斯特定理与香农定理</strong></p>
<ul>
<li><p>奈奎斯特定理的理解：<a href="https://zhuanlan.zhihu.com/p/222644023">知乎</a></p>
</li>
<li><p>香农定理</p>
</li>
</ul>
<p>数据无论是数字的还是模拟的，为了传输的目的都必须转变成信号，把数据变换为模拟信号的过程成为调制，把数据变换为数字信号的过程称为编码。</p>
<p>三种编码方式</p>
<ul>
<li><p>非归零码</p>
<p>用两个电压来表示两个二进制数字，如用低电平表示0，高电平表示1。编码虽然容易实现，但是没有检错功能，而且也无法判断一个码元的开始和结束，以至于收发双方难以保持同步。</p>
</li>
<li><p>曼彻斯特编码</p>
<p>将一个码元分成两个相等的间隔。特点是在每一个码元的中间出现电平跳变。以太网使用的编码方式就是曼彻斯特编码。</p>
</li>
<li><p>差分曼彻斯特编码</p>
<p>可以实现自同步，抗干扰性良好。</p>
</li>
</ul>
<p>数字数据调制为模拟信号</p>
<ul>
<li><p>幅移键控</p>
<p>通过改变载波信号的振幅来表示数字信号1和0. 比较容易实现，但是抗干扰能力差。</p>
</li>
<li><p>频移键控</p>
<p>通过改变载波信号的频率来表示数字信号1和0，而振幅和相位不改变。容易实现，抗干扰能力强，目前应用较为广泛。</p>
</li>
</ul>
<p>模拟数据编码为数字信号。</p>
<blockquote>
<p>该编码方法最典型的例子就是常用于对音频信号进行编码的脉码调制（PCM）。它主要包括三个步骤，即抽样、量化、编码</p>
</blockquote>
<p>模拟数据调制为模拟信号</p>
<blockquote>
<p>为了实现传输的有效性，可能需要较高的频率。这种调制方法还可以使用频分（FDM）复用技术，充分利用带宽资源。</p>
</blockquote>
<p>电路交换、报文交换与分组交换</p>
<ul>
<li><p>电路交换</p>
<p>在进行数据传前，两个节点之间必须先建立一条专用（双方独占）的物理通信路径（由通信双方之间的交换设备和链路逐段连接而成），该路径可能经过许多中间节点。该线路在整个数据传输期间一直被独占，直到通信结束后才被释放。因此，电路交换技术分为三个阶段：连接建立，数据传输和连接释放。</p>
<p>电路交换的关键点是：在数据传输的过程种，用户始终占用端到端的固定传输带宽。</p>
<p>优点：</p>
<ul>
<li>通信时延小</li>
<li>有序传输</li>
<li>没有冲突</li>
<li>适用范围广</li>
<li>实时性强</li>
<li>控制简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>建立连接时间长</li>
<li>线路独占，使用效率低。</li>
<li>灵活性差。</li>
<li>难以规格化。</li>
</ul>
</li>
<li><p>报文交换</p>
<p>数据交换的单位是报文，报文携带有目标地址，源地址等信息。报文交换在交换节点采用的是存储转发的传输方式。</p>
<p>优点：</p>
<ul>
<li>无需建立连接。</li>
<li>动态分配线路。</li>
<li>提高线路可靠性。</li>
<li>提高线路利用率。</li>
<li>提供多目标服务。</li>
</ul>
<p>缺点：</p>
<ul>
<li>由于数据进入交换节点后要精力存储、转发这一过程，从而引起转发时延（包括接受报文、检验正确性、排队、发送时间等）</li>
<li>报文交换对报文的大小没有限制，这就要求网络节点需要较大的缓存空间。</li>
</ul>
</li>
<li><p>分组交换</p>
<p>同报文交换一样，分组交换也采用了存储转发方式，但解决了报文交换中大报文传输的问题。分组交换限制了每次传送的数据大小的上限，把大的数据块划分为合理的小数据块，再加上一些必要的控制信息（如源地址、目标地址和编号信息等），构成分组（Packet）。</p>
<p>优点：</p>
<ul>
<li>无建立时延。</li>
<li>线路利用率高</li>
<li>简化了存储管理（相对于报文交换）。</li>
<li>加速传输：分组是逐个传输，可以使后一个分组的存储操作与前一个分组的转发操作并行，这种流水线方式减少了报文的传输时间。</li>
<li>减少了出错几率和重发数据量。</li>
</ul>
</li>
<li><p>分组交换的缺点</p>
<ul>
<li>存在传输时延、</li>
<li>需要传输额外的信息量</li>
<li>当分组交换采用数据报服务时，可能出现失序、丢失或者重复分组。</li>
</ul>
</li>
</ul>
<p>数据报与虚电路</p>
<blockquote>
<p>数据报与虚电路方式是分组交换的两种方式。</p>
</blockquote>
<ul>
<li><p>数据报</p>
<p>在端系统中实现的高层协议先把报文拆成若干个带有序号的数据单元，并在网络层加上地址等控制信息后形成数据包分组（即网络层PDU）。中间界点存储分组一段很短的时间，找到最佳的路由后，尽快转发每个分组。不同的分组可以走不同的路径，也可以按不同的顺序到达目的节点。</p>
</li>
<li><p>虚电路</p>
<p>虚电路方式试图将数据报方式和电路交换方式解和起来，充分发挥两种方法的优点，以达到最佳的数据交换效果。</p>
</li>
</ul>
<h3 id="2-2-传输介质"><a href="#2-2-传输介质" class="headerlink" title="2.2 传输介质"></a>2.2 传输介质</h3><p>传输介值可分为导向传输介质可非导向传输介质。在导向传输介质中，电磁波被导向沿着固体媒介（铜线或者光纤）传播，而非导向传输介质可以是空气、真空或者海水等。</p>
<ul>
<li><p>双绞线</p>
<p>双绞线价格便宜，常用于局域网和传统电话网。双绞线带宽取决于铜线的粗细和传输的距离。模拟传输和数字传输都可以使用双绞线，其通信距离一半为几公里到几十公里。距离太远时，对于模拟传输，要用放大器放大衰减的信号；对于数字传输，要使用中继器将失真的信号整形。</p>
</li>
<li><p>同轴电缆</p>
</li>
<li><p>光纤（多模光纤和单模光纤）</p>
</li>
<li><p>无线传输介质——WLAN（无线局域网）</p>
<p>无线电波、微波、红外线、激光</p>
</li>
</ul>
<p>物理接口的特性</p>
<blockquote>
<p>常用的物理层接口标准有 EIA RS-232-C ADSL SONET/SDH</p>
</blockquote>
<ul>
<li><p>机械特性</p>
</li>
<li><p>电气特性</p>
</li>
<li><p>功能特性</p>
</li>
<li><p>规程特性</p>
</li>
</ul>
<h3 id="2-3-物理层设备"><a href="#2-3-物理层设备" class="headerlink" title="2.3 物理层设备"></a>2.3 物理层设备</h3><p>中继器</p>
<blockquote>
<p>中继器又称为转发器，主要功能是将信号整形并放大再转发出去。</p>
<p>中继器两端的网段一定要是同一个协议。</p>
</blockquote>
<p>集线器</p>
<blockquote>
<p>实际上是多端口的中继器。</p>
</blockquote>
<h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><p>[考纲内容]</p>
<p>（一）数据链路层的功能</p>
<p>（二）组帧</p>
<p>（三）差错控制</p>
<p>检错编码；纠错编码</p>
<p>（四）流量控制与可靠传输基指</p>
<p>流量控制、可靠传输与滑动窗口机制；停止-等待协议</p>
<p>后退N帧协议（GBN）；选择重传协议（SR）</p>
<p>（五）介质访问控制</p>
<ol>
<li>信道划分</li>
<li>随机访问</li>
<li>轮询访问：令牌传递协议</li>
</ol>
<p>（六）局域网</p>
<p>（七）广域网</p>
<p>（八）数据链路层设备</p>
<h3 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h3><blockquote>
<p>数据链路层是在物理层提供服务的基础上像网络层提供服务，其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p>
</blockquote>
<ol>
<li><p>为网络层提供服务</p>
<p> 对网络层而言，数据链路层的基本任务是基本任务是将源机器中来自网络层的数据传输到目标机器的网络层。</p>
<p> 数据链路层可为网络层提供的服务有  </p>
<ul>
<li>无确认的无连接服务</li>
<li>有确认的无连接服务</li>
<li>有确认的面向连接服务</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>链路管理</p>
<p>数据链路层连接的建立、维持和释放过程就称作链路管理，它主要用于面向连接的服务。</p>
</li>
<li><p>帧定界、帧同步与透明传输</p>
<p>两个工作站之间传输信息时，必须将网络层的分组封装成帧，以帧的格式进行传送。</p>
<p>将一段数据的前后分别添加首部和尾部，就构成了帧。首部和尾部中含有很多控制信息，它们的一个重要作用是确定帧的界限，即帧定界。帧同步指的是接收方应当能从接受到的二进制比特流中区分出帧的起始与中止。</p>
<p>如果在数据中恰好出现与帧定界符相同的比特组合，就要采取有效的措施解决这个问题，即透明传输。更确切地说，透明传输就是不管所传数据是什么样的比特组合，都应当能在链路层上传输。</p>
</li>
<li><p>流量控制</p>
<p>流量控制实际上就是限制发送方的数据流量，使其发送速率不致超过接收方的接受能力。</p>
</li>
<li><p>差错控制</p>
<p>由于信道噪声等各种原因，帧在传输过程种可能会出现错误。用以使发送方确定接收方是否正确受到了由它发送的数据的方法称为差错控制。通常，这些错误可以分为位错和帧错。</p>
<ul>
<li>位错指帧中某些位出现了差错。通常采用循环冗余校验（CRC）方式发现位错，通过自动重传请求（ARQ）方式来重传出错的帧。具体做法就是：让发送方将要发送的数据帧附加一定的CRC冗余检错码一并发送，接收方根据检错码对数据帧进行错误检测，若发现错误，则丢弃，发送方超时重传数据帧。这种差错控制方法就称为ARQ法</li>
<li>帧错是指帧的丢失、重复或失序等错误。在数据链路层引入定时器和编号机制，可以保证每一帧最终都能有且有一次正确地交付给目的节点。</li>
</ul>
</li>
</ol>
<h3 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h3><blockquote>
<p>数据链路层之所以要把比特组合成帧为单位传输，是为了在出错时只重发出错的帧，而不必重发全部数据，从而提高了效率。</p>
<p>组帧主要解决帧定界、帧同步、透明传输等问题。</p>
</blockquote>
<ul>
<li><p>字符计数法</p>
<p>字符计数法是在帧头部使用一个技术字段来标明帧内字符数。当目的节点的数据链路层收到字节计数值时就知道后面跟随的字节数，从而可以确定帧结束的位置。</p>
<p>问题： 如果技术字段出错，即失去了帧边界划分的依据，造成灾难性后果。</p>
</li>
<li><p>字符填充的首尾定界符法</p>
<p>字符填充法使用特定的字符来定界一帧 的开始与结束。为了使信息为中出现的特殊字符不被误判为帧的首尾定界符，可以在特殊字符前面填充一个转义字符来加以区分。</p>
</li>
<li><p>比特填充的首尾标志法</p>
<p>它使用一个特定的比特模式，即01111110来标志一帧的开始和结束。为了不使信息位中出现的比特流01111110被误判位帧的首尾标志，发送方的数据链路层在信息位中遇到了5个连续的“1”时，将自动在其后插入一个“0”；而接收方做该过程的逆操作，即没收到5个连续的“1”时，则自动删除后面紧跟的“0”，以恢复原信息。</p>
<p>比特填充很容易由硬件来实现，性能优于字符填充方法。</p>
</li>
<li><p>违规编码法</p>
<p>物理层比特编码时通常采用违规编码法。例如，曼彻斯特编码方法。可以解用这些额外违规编码序列来定界帧的起始和中止。</p>
</li>
</ul>
<h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>概括地说，传输中的差错都是由于噪声引起的。噪声有两大类：一类是信道所固有的、持续存在的随机热噪声；另一类是由于外界特定的短暂原因所造成的冲击噪声。前者可以通过提高信噪比来减少或者避免干扰，而后者不可能靠信号幅度来避免干扰造成的差错，是产生差错的重要原因。通常利用编码技术进行差错控制，主要有两类：</p>
<ul>
<li><p>自动重传请求（ARQ）和前向纠错（FEC）。在ARQ方式中，接收端检测出差错时，就设法通知发送端重发，指导接受到正确的码字位置。在FEC方式中，接收端不但能发现差错，而且能确定二进制数码的错误位置，从而加以纠正。因此，差错控制又可分为检错编码和纠错编码。</p>
<ol>
<li><p>检错编码</p>
<ul>
<li><p>奇偶校验码</p>
<p>奇偶检验码时奇校验码和偶校验码的同成，是最基本的检错码。</p>
</li>
<li><p>循环冗余码</p>
<p>又称为多项式码，任何一个由二进制数位串组成的代码都可以</p>
</li>
</ul>
</li>
<li><p>纠错编码</p>
</li>
</ol>
</li>
</ul>
<h3 id="流量控制和可靠传输机制"><a href="#流量控制和可靠传输机制" class="headerlink" title="流量控制和可靠传输机制"></a>流量控制和可靠传输机制</h3><p>流量控制、可靠传输与滑动窗口机制</p>
<blockquote>
<p>流量控制涉及对链路上的帧的发送速率的控制，以使接受方有足够的缓冲空间来接受每一帧。</p>
</blockquote>
<p>常见的方式有两种：停止-等待协议和滑动窗口协议。</p>
<ul>
<li><p>停止-等待流量控制基本原理</p>
<p>发送方每发送一阵，都要等待接受方的应答信号，之后才能发送下一帧；接收方每接受一帧，都要反馈一个应答信号，表示可接受下一帧，如果接收方不反馈应答信号，则发送方必须一直等待。</p>
<p>每次只允许发送一帧，然后就陷入等待接收方确认信息的过程中，因而传输效率很低。</p>
</li>
<li><p>滑动窗口流量控制基本原理</p>
<p>通过发送方和接收方建立滑动窗口的方式对流量进行控制。</p>
<p>重要特性：</p>
<ul>
<li><p>只有接受窗口向前滑动时，发送窗口才有可能向前滑动。</p>
</li>
<li><p>从滑动窗口的概念上看，停止-等待协议，后退N帧协议和选择重传协议只在发送窗口大小和接收窗口大小上有区别。</p>
</li>
<li><p>当接受窗口的大小为1时，可保证帧的有序接受。</p>
</li>
<li><p>数据链路层的滑动窗口协议中，窗口的大小在传输过程中是固定的。</p>
</li>
</ul>
</li>
<li><p>可靠传输机制</p>
<p>数据链路层的可靠传输通常使用确认和超时重传两种机制来完成。</p>
<blockquote>
<p>  确认是一种无数据的的控制帧，这种控制帧使得接受方可以让发送方指导哪些内容被正确接受。</p>
<p>有些情况下为了提高传输效率，将确认捎带在一个回复帧中，称为捎带确认。</p>
<p>超时重传是指发送方在发送某一个数据帧后开启一个计时器，在一定时间内如果没有得到数据帧的确认帧，那么就重新发送该数据帧，直到发送成功为止。</p>
<p>自动重传请求（ARQ）,通过接受方请求发送方重传出错的数据帧来恢复出错的帧，是通信中用于处理信道所带来差错的方式之一。</p>
<p>传统自动重传请求分为三种，即停等式ARQ，后退N帧ARQ，以及选择性重传ARQ。后两种协议是滑动窗口技术与请求重发技术的解和，由于窗口尺寸开到足够大时，帧在线路上可以连续地流动，因此又将其称为连续ARQ协议。</p>
</blockquote>
</li>
</ul>
<h3 id="单帧滑动窗口与停止-等待协议"><a href="#单帧滑动窗口与停止-等待协议" class="headerlink" title="单帧滑动窗口与停止-等待协议"></a>单帧滑动窗口与停止-等待协议</h3><blockquote>
<p>从滑动窗口机制的叫渡看，停止-等待协议相当于发送窗口和接受窗口大小均为1的滑动窗口协议。</p>
</blockquote>
<p>在停止-等待协议种，除了数据帧丢失，还可能出现以下两种差错：</p>
<ul>
<li>到达目的站的帧可能已遭破坏，接收站利用前面讨论过的差错检测技术检出后，简单地将该帧丢弃。为了对付这种可能发生的情况，源站使用计时器判断是否收到确认。</li>
<li>数据帧正确而确认帧遭到破坏，接收方收到了数据帧，而发送方收不到确认帧，因此发送方会重传已经被接受的数据帧，接收方收到了同样的数据帧时会丢弃该帧，并重传一个该帧对应的确认帧。发送的帧交题地使用0和1来标识，肯定确认则分别使用ACK0和ACK1来表示。</li>
</ul>
<blockquote>
<p>在停止-等待协议种，若连续出现了相同发送序号的数据帧，表明发送端进行了超时重传。连续出现相同序号的确认帧，表明接收端收到了重复帧。</p>
</blockquote>
<h3 id="多帧滑动窗口和后退N帧协议（GBN）"><a href="#多帧滑动窗口和后退N帧协议（GBN）" class="headerlink" title="多帧滑动窗口和后退N帧协议（GBN）"></a>多帧滑动窗口和后退N帧协议（GBN）</h3><p>在后退N帧式ARQ种，发送方不需要在收到上一个帧的ACK后才能开始发送下一帧，而是可以连续发送帧。当接受方检测出失序的信息帧后，要求发送方重新发送最后一个正确帧以后的所有未被确认的帧。</p>
<h3 id="多帧滑动窗口于选择重传协议（SR）"><a href="#多帧滑动窗口于选择重传协议（SR）" class="headerlink" title="多帧滑动窗口于选择重传协议（SR）"></a>多帧滑动窗口于选择重传协议（SR）</h3><blockquote>
<p>为进一步提高信道的利用率，可设法只重传出现差错的数据帧或者是技术其超时的数据帧。但此时必须加大接收窗口，以便先手下发送序号不连续但仍储在接收窗口中的那些数据帧。</p>
<p>一般情况下，在SR协议里面，接受窗口的大小和发送窗口的大小是相同的。</p>
</blockquote>
<h4 id="信道的效率，也称为信道利用率。信道效率是对发送方而言的，是指发送方在一个发送周期的时间内-，有效地发送数据所占的时间占整个发送周期的比率。"><a href="#信道的效率，也称为信道利用率。信道效率是对发送方而言的，是指发送方在一个发送周期的时间内-，有效地发送数据所占的时间占整个发送周期的比率。" class="headerlink" title="信道的效率，也称为信道利用率。信道效率是对发送方而言的，是指发送方在一个发送周期的时间内 ，有效地发送数据所占的时间占整个发送周期的比率。"></a>信道的效率，也称为信道利用率。信道效率是对发送方而言的，是指发送方在一个发送周期的时间内 ，有效地发送数据所占的时间占整个发送周期的比率。</h4><blockquote>
<p>信道吞吐率 =  信道利用率 * 发送方的发送速率。</p>
</blockquote>
<h3 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h3><blockquote>
<p>介质访问控制索要完成的主要任务是为使用介质的每个节点隔离来自同一信道上其他节点所传送的信号，以协调活动节点的传输。用来决定广播信道中信道分配的协议属于数据链路层的一个子层，称为介质访问控制（MAC）子层。</p>
</blockquote>
<h4 id="信道划分介质访问控制"><a href="#信道划分介质访问控制" class="headerlink" title="信道划分介质访问控制"></a>信道划分介质访问控制</h4><p>信道划分的实质就是通过分时、分频、分码等方法等方法把原来的一条广播信道，逻辑上分为几条用于两个节点之间的互不干扰的子信道，实际上就是把广播信道转变为点对点信道。</p>
<p>信道划分介质分为以下四种</p>
<ul>
<li><p>频分多路复用</p>
<p>频分多路复用是一种将多路基带信号调制到不同频率载波上再进行叠加形成一个复合信号的多路复用技术。</p>
<p>频分多路复用的技术优点在于充分利用了传输介质的带宽，系统效率较高；由于技术比较成熟，实现比较容易。</p>
</li>
<li><p>时分多路复用</p>
<p>时分多路复用是将一条物理信道按时间分成若干个时间片，轮流地分配给多个信号使用。</p>
</li>
<li><p>波分多路复用</p>
<p>波分多路复用就是光的频分多路复用</p>
</li>
<li><p>码分多路复用</p>
<p>码分多路复用是靠不同的编码来区分各路原始信号的一种复用方式。</p>
</li>
</ul>
<h4 id="随机访问介质访问控制"><a href="#随机访问介质访问控制" class="headerlink" title="随机访问介质访问控制"></a>随机访问介质访问控制</h4><p>核心思想：胜利者通过争用信道，从而获得信息的发送权。因此，随机访问介质访问控制协议又称为争用型协议。</p>
<ol>
<li><p>ALOHA协议</p>
<ul>
<li>纯ALOHA协议</li>
<li>时隙ALOHA协议</li>
</ul>
</li>
<li><p>CSMA协议</p>
<p> 思想：每个站点发送前都先侦听一下共用的信道，发现信道空闲后再发送。</p>
<ul>
<li><p>１－坚持CSMA</p>
<p>当一个结点要发送数据时，首先侦听信道；如果信道空闲就立即发送数据；如果信道忙则等待，同时继续侦听直至信道空闲；如果发生冲突，则随机等待一段时间后，再重新开始侦听信道。</p>
</li>
<li><p>２－非坚持CSMA</p>
<p>当一个节点要发送数据时，首先侦听信道；如果信道空闲就立即发送数据；如果信道忙就放弃侦听，等待一个随机的时间后再重复上述过程。</p>
</li>
</ul>
</li>
<li><p>CSMA/CD 协议</p>
<p>载波侦听多路访问/碰撞检测协议是CSMA的改进方案，适用于总线性网络或半双工网络环境。</p>
<p>“先听后发，边听边发（区别于CSMA），冲突停发，随机重发” </p>
</li>
<li><p>CSMA/CA 协议</p>
<p>采用二进制指数退避算法。信道从忙态变为空闲态时，任何一个站要发送数据帧时，不仅都必须等待一个时间间隔，而且还要进入争用窗口，并计算随机退避时间以便再次重新试图接入到信道。</p>
</li>
</ol>
<h4 id="轮询访问介质访问控制：令牌传递协议"><a href="#轮询访问介质访问控制：令牌传递协议" class="headerlink" title="轮询访问介质访问控制：令牌传递协议"></a>轮询访问介质访问控制：令牌传递协议</h4><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><h4 id="局域网的基本概念和体系结构"><a href="#局域网的基本概念和体系结构" class="headerlink" title="局域网的基本概念和体系结构"></a>局域网的基本概念和体系结构</h4><blockquote>
<p>局域网（LAN）是再一个较小的地理范围内将各种计算机、外部设备和数据库系统等通过双绞线、同轴电缆等连接介质互相连接起来，组成资源和信息共享的计算机互联网络。主要特点有：</p>
<ol>
<li>为一个单位所拥有，且地理范围和站点数目均有限。</li>
<li>所有的站共享较高的总带宽</li>
<li>较低的时延和较低的误码率</li>
<li>各站为平等关系而不是主从关系。</li>
<li>能进行广播和组播</li>
</ol>
</blockquote>
<p>局域网的特性主要由三个要素决定：拓扑结构、传输介质、介质访问控制方式，其中最重要的是介质访问控制方式，决定着局域网的技术特性。</p>
<p>常见的局域网拓扑结构主要有四大类：</p>
<ul>
<li>星型结构 </li>
<li>环形结构</li>
<li>总线性结构</li>
<li>星形和总线性结合的复合型结构</li>
</ul>
<p>局域网可以使用双绞线、铜缆和光纤等多种传输介质，其中双绞线为主流传输介质。</p>
<p>三种特殊的局域网拓扑实现：</p>
<ul>
<li>以太网（目前使用范围最广的局域网）—— 逻辑拓扑是总线型结构，物理拓扑是星形或拓展型结构。</li>
<li>令牌环 —— 逻辑拓扑是环形结构，物理拓扑是星形结构</li>
<li>FDDI（光纤分布数字结构，IEEE802.8） —— 逻辑拓扑是环形结构，物理拓扑是双环结构</li>
</ul>
<h4 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h4><p>以太网采用两项措施简化通信：</p>
<ol>
<li>采用无连接的工作方式</li>
<li>不对发送的数据帧编码，也不要求接收方发送确认，即以太网尽最大努力交付数据，提供地是不可靠服务，对于差错的纠正则由高层完成。</li>
</ol>
<h5 id="以太网的传输介质和网卡"><a href="#以太网的传输介质和网卡" class="headerlink" title="以太网的传输介质和网卡"></a>以太网的传输介质和网卡</h5><p>传输介质有四种：粗缆、细缆、双绞线、光纤。</p>
<blockquote>
<p>计算机与外界局域网的连接是通过主机箱内插入一块网络接口板，又称为网络适配器或者网络接口卡。网卡上装有处理器和存储器，是工作在数据链路层的网络组件。网卡是局域网中连接计算机和传输介质的接口，不仅能实现与局域网传输介质之间的物理连接和电信号匹配，还涉及帧的发送与接受、帧的封装与拆封、介质访问控制、数据的编码与戒嘛以及数据缓存的功能等。</p>
</blockquote>
<blockquote>
<p>全世界的每块网卡在出厂时都有一个唯一的代码，称为介质访问控制（MAC）地址，这个地址用于控制主机在网络上的数据通信。数据链路层设备（网桥、交换机等）都使用各个网卡的MAC地址。另外，网卡控制者主机对介质的访问，因此网卡也工作在物理层，因为它只关注比特，而不关注任何的地址信息和高层协议信息。</p>
</blockquote>
<p>以太网的MAX帧</p>
<blockquote>
<p>每一块网络适配器（网卡）有一个地址，也称物理地址。</p>
<p>由于总线上使用的是广播通信，因此网卡从网络上每收到一个MAC帧，首先要用硬件检查MAC帧中的MAC地址。如果是发往本站的就收下，否则丢弃。</p>
</blockquote>
<p>注意：MAC 帧并不需要帧结束符，因为以太网在传送帧时，各帧之间必须有一定的间隙。因此，接收端只要找到帧开始定界符，其后面连续到达的比特流就都数据同一个MAC帧。但不要误以为MAC帧不需要尾部，在数据链路层上，帧既要加首部，也要加尾部。</p>
<p>包含内容：</p>
<ul>
<li>地址：6字节</li>
<li>类型：2字节</li>
<li>数据：46-1500 字节</li>
<li>填充：0-46字节</li>
<li>校验码（FCS）：4字节</li>
</ul>
<h4 id="数据链路层设备"><a href="#数据链路层设备" class="headerlink" title="数据链路层设备"></a>数据链路层设备</h4><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><p>【考纲内容】</p>
<p>网络层的功能： 异构网络互连；路由与转发；拥塞控制</p>
<p>路由算法：</p>
<p>静态路由和动态路由；距离-向量路由算法；链路状态路由算法；层次路由</p>
<p>IPv4:</p>
<p>IPv4分组；IPv4地址与NAT；子网划分与子网掩码、CIDR、路由聚集</p>
<p>ARP协议、DHCP协议与ICMP协议</p>
<p>IPv6: IPv6地址</p>
<p>路由协议：</p>
<p>自治系统；域内路由和域间路由；RIP路由协议 ；OSPF路由协议；BGP路由协议</p>
<p>IP组播</p>
<p>组播的概念；移动IP通信过程</p>
<p>网络层设备</p>
<p>路由器的组成和功能；路由表与路由转发</p>
<h3 id="4-1-网络层的功能"><a href="#4-1-网络层的功能" class="headerlink" title="4.1 网络层的功能"></a>4.1 网络层的功能</h3><h4 id="4-1-1-异构网络互联"><a href="#4-1-1-异构网络互联" class="headerlink" title="4.1.1 异构网络互联"></a>4.1.1 异构网络互联</h4><p>所谓网络的互联是指将两个以上的计算机网络，通过一定的方法，用一种或多种通信处理设备相互连接起来，以构成更大的网络系统。中间设备又称为中间系统或中继系统。</p>
<ul>
<li>物理层中继系统：中继器、集线器</li>
<li>数据链路层中继系统：网桥、交换机</li>
<li>网络层中继系统：路由器</li>
<li>网络层以上的中继系统：网关</li>
</ul>
<h4 id="4-1-2-路由和转发"><a href="#4-1-2-路由和转发" class="headerlink" title="4.1.2 路由和转发"></a>4.1.2 路由和转发</h4><p>路由器主要完成两个功能：一个是路由选择（确定哪一条路径），另一个是分组转发。前者根据特定的路由选择协议构造路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。后者处理通过路由器的数据流，关键操作是转发表查询、转发以及相关的队列管理和任务调度。</p>
<p>路由选择：按照分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态地改变所选择的路由。</p>
<p>分组转发：指路由器根据转发表将用户的IP数据包从合适的端口转发出去。</p>
<h4 id="4-1-3-拥塞控制"><a href="#4-1-3-拥塞控制" class="headerlink" title="4.1.3 拥塞控制"></a>4.1.3 拥塞控制</h4><p>在通信子网中，由于出现过量的分组而引起网络性能下降的现象称为拥塞。</p>
<p>判断网络是否进入拥塞状态的方法是观察网络的吞吐量和网络负载的关系：如果随着网络负载的增加，网络的吞吐量明显小于正常的吞吐量，那么网络就可能进入了“轻度拥塞”状态；如果网络的吞吐量随着网络负载的增大反而下降，网络就可能进入拥塞状态；如果网络的负载继续增大，而网络的吞吐量下降到0，网络就可能进入了死锁状态。</p>
<p>流量控制和拥塞控制的区别：流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接受。而拥塞控制必须确保通信子网能够传送待传送的数据，是一个全局性的问题。</p>
<p>控制方法：</p>
<p>开环控制：静态预防</p>
<p>闭环控制：动态方法，随时监视拥塞，将拥塞信息传到合适的地方。</p>
<h3 id="4-2-路由算法"><a href="#4-2-路由算法" class="headerlink" title="4.2 路由算法"></a>4.2 路由算法</h3><h4 id="4-2-1-静态路由和动态路由"><a href="#4-2-1-静态路由和动态路由" class="headerlink" title="4.2.1 静态路由和动态路由"></a>4.2.1 静态路由和动态路由</h4><p>静态路由算法：网络管理员手工配置。</p>
<p>动态路由算法：通过相互连接的路由器彼此交换信息。</p>
<h4 id="4-2-2-距离-向量路由算法"><a href="#4-2-2-距离-向量路由算法" class="headerlink" title="4.2.2 距离-向量路由算法"></a>4.2.2 距离-向量路由算法</h4><p>RIP算法，采用“跳数”作为距离的度量。</p>
<h4 id="4-2-3-链路状态路由算法"><a href="#4-2-3-链路状态路由算法" class="headerlink" title="4.2.3 链路状态路由算法"></a>4.2.3 链路状态路由算法</h4><p>要求每个参与该算法的节点都有完全的网络拓扑信息。</p>
<p>OSPF算法。</p>
<p>距离-向量路由算法与链路状态路由算法的比较：在距离-向量路由算法中，每个结点仅与它的直接邻居交谈，它为它的邻居提供了从自己到网络中所有其他结点的最低费用估计。在链路状态路由算法中，每个结点通过广播的方式与所有其他结点交谈，但它仅告诉它们与它直接相连的链路的费用。相较之下，距离-向量路由算法有可能遇到路由环路等问题。</p>
<h4 id="4-2-4-层次路由"><a href="#4-2-4-层次路由" class="headerlink" title="4.2.4 层次路由"></a>4.2.4 层次路由</h4><p>因特网将整个互联网划分为许多较小的自治系统（一个自治系统中包含很多局域网），每个自治系统有权自主地决定本系统内应采用何种路由选择协议。如果两个自治系统需要通信，就需要一种在两个自治系统之间的协议来屏蔽这些差异。</p>
<p>一个自治系统内部所使用的路由选择协议称为内部网关协议（IGP），也称为域内路由选择，具体的协议有RIP和OSPF等。</p>
<p>自治系统之间使用的路由选择协议是外部网关协议（EGP），也称为域间路由选择，用于不同自治系统的路由器之间交换路由信息，并负责为分组在不同自治系统之间选择最优的路径。具体的协议有BGP。</p>
<h3 id="4-3-IPv4"><a href="#4-3-IPv4" class="headerlink" title="4.3 IPv4"></a>4.3 IPv4</h3><h2 id="第五章-传输层（40页）"><a href="#第五章-传输层（40页）" class="headerlink" title="第五章 传输层（40页）"></a>第五章 传输层（40页）</h2><h2 id="第六章-应用层（30页）"><a href="#第六章-应用层（30页）" class="headerlink" title="第六章 应用层（30页）"></a>第六章 应用层（30页）</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
  </entry>
  <entry>
    <title>通货膨胀杂谈</title>
    <url>/2021/09/24/blog3/</url>
    <content><![CDATA[<p>​    </p>
<p>先来考虑一个基本的问题，什么是通货膨胀？如何定义通货膨胀？由此可以延伸出很多新的问题。</p>
<p>通货膨胀，是指经济运行中出现的全面、持续的物价上涨的现象。纸币发行量超过流通中实际需要的货币量，是导致通货膨胀的主要原因之一；通货紧缩，是与通货膨胀相反的一种经济现象。它表现为物价全面持续下跌，通常伴随着经济衰退出现。 </p>
<ul>
<li><p>个人理解</p>
<p>通货膨胀是货币量发行过多，导致商品价格全面上涨的现象。</p>
<p>可以由此思考哪些问题 ？ </p>
<ul>
<li>问题1： 货币量是否每一年都会发行 ？</li>
<li>问题2： 货币量 流通 和 不流通 的影响有多少 ？</li>
<li>问题3： 业主如何根据定商品价格？（是源于货币发行量过多么？</li>
<li>问题4： 通货膨胀 会导致 不同的商品 涨价，那么这个幅度会共同涨比例类似的价格？还是会出现混乱的局面？</li>
<li>GDP 增长，不发行货币 是不是就不会 出现通货膨胀的 局面 ？</li>
<li>各个国家相互之间的货币会发生怎样的影响 ？</li>
</ul>
</li>
</ul>
<h4 id="消费者物价指数是什么？"><a href="#消费者物价指数是什么？" class="headerlink" title="消费者物价指数是什么？"></a>消费者物价指数是什么？</h4><p>消费者物价指数(Consumer Price Index)，英文缩写为CPI，是反映与居民生活有关的商品及劳务价格统计出来的物价变动指标，通常作为观察通货膨胀水平的重要指标。</p>
<blockquote>
<p>如果消费者物价指数升幅过大，表明通胀已经成为经济不稳定因素，央行会有紧缩货币政策和财政政策的风险，从而造成经济前景不明朗。因此，该指数过高的升幅往往不被市场欢迎。例如，在过去12个月，消费者物价指数上升2.3％，那表示，生活成本比12个月前平均上升2.3％。当生活成本提高，你的金钱价值便随之下降。也就是说，一年前收到的一张100元纸币，今日只可以买到价值97.75元的商品或服务。一般说来当CPI&gt;3%的增幅时我们称为Inflation，就是通货膨胀；而当CPI&gt;5%的增幅时，我们把它称为Serious Inflation，就是严重的通货膨胀。 </p>
</blockquote>
<h4 id="CPI-是如何计算的？"><a href="#CPI-是如何计算的？" class="headerlink" title="CPI 是如何计算的？"></a>CPI 是如何计算的？</h4><p>消费者价格指数(Consumer Price Index)，是对一个固定的消费品篮子价格的衡量，主要反映消费者支付商品和劳务的价格变化情况，也是一种度量通货膨胀水平的工具，以百分比变化为表达形式。在美国构成该指标的主要商品共分七大类，其中包括：食品、酒和饮品住宅；衣着；交通；医药健康；娱乐；其他商品及服务。在美国，消费物价指数由劳工统计局每月公布，有两种不同的消费物价指数。一是工人和职员的消费物价指数，简称CPI-W。二是城市消费者的消费物价指数，简称CPI-U。  </p>
<h4 id="参考指标"><a href="#参考指标" class="headerlink" title="参考指标"></a>参考指标</h4><p>（CPI）是一个滞后性的数据，但它往往是市场经济活动与政府货币政策的一个重要参考指标。CPI稳定、就业充分及GDP增长往往是最重要的社会经济目标。不过，从中国的现实情况来看，CPI的稳定及其重要性并不像发达国家所认为的那样“有一定的权威性，市场的经济活动会根据CPI的变化来调整”。近几年来欧美国家GDP增长一直在2%左右波动，CPI也同样在0%～3%的范围内变化，而中国的情况则完全不同。首先是国内经济快速增长，近两年来GDP增长都在9%以上，CPI却没有多少波动，表面看来这可以说得上是“政府对经济运行调控自如，市场行为反映十分理性”。二是一年之内CPI大起大落，前后相差几个百分点；一般情况下，除非经济生活中有重大的突发事件（如1997年的亚洲金融危机），CPI是不可能大起大落的，所以2004年中国的CPI大幅波动有些异常。三是随着CPI大幅波动，国内经济一时间通货膨胀率过高，民众储蓄负利率严重，一时间居民储蓄又告别负收益，通货紧缩阴影重现。这样一种经济环境令人担忧，因此，如何理解CPI指数便成为一个十分重要的问题。  </p>
<h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><p>CPI的计算公式是 CPI=（一组固定商品按当期价格计算的价值）除以（一组固定商品按基期期价格计算的价值）乘以100。 CPI告诉人们的是，对普通家庭的支出来说，购买具有代表性的一组商品，在今天要比过去某一时间多花费多少，例如，若1995年某国普通家庭每个月购买一组商品的费用为800元，而2000年购买这一组商品的费用为1000元，那么该国2000年的消费价格指数为（以1995年为基期）CPI= 1000/800<em>100=125，也就是说上涨了25%。在日常中我们更关心的是通货膨胀率，它被定义为从一个时期到另一个时期价格水平变动的百分比，公式为T=（P1—P0）/P0，式子中T为1时期的通货膨胀率，P1和P0分别表示1时期和0时期的价格水平。如果用上面介绍的消费价格指数来衡量价格水平，则通货膨胀率就是不同时期的消费价格指数变动的百分比。假如一个经济体的消费价格指数从去年的100增加到今年的112，那么这一时期的通货膨胀率就为 T=（112—100）/100</em>100%=12%，就是说通货膨胀率为12%，表现为物价上涨12%。  </p>
<h5 id="货币是否每一年都会发行？"><a href="#货币是否每一年都会发行？" class="headerlink" title="货币是否每一年都会发行？"></a>货币是否每一年都会发行？</h5>]]></content>
  </entry>
  <entry>
    <title>git 学习笔记</title>
    <url>/2021/09/26/blog6/</url>
    <content><![CDATA[<p><font color=FF0000> <strong>目的：</strong></font> 掌握常见情景下的 git 命令</p>
<table><tr><td bgcolor=lightblue><font color=000000>情景一：在 A 电脑端更新了 xx库中的 yy 分支， 在 B 电脑端如何更新代码？</td></tr></table>


<p> <strong>Ans</strong>: 保持 git pull 的好习惯 即可。</p>
<table><tr><td bgcolor=lightblue><font color=000000>情景二：单个分支提交了多个commit,如何进行合并，简化代码？</td></tr></table>


<p><strong>Ans</strong>: 参考<a href="https://blog.csdn.net/qq_23274715/article/details/112911355">链接</a>做出回答:</p>
<p>合并多个commit的情景可分为以下两种情况：</p>
<ul>
<li><p>要合并的<strong>所有</strong>commit都还没有push到<strong>远程仓库</strong>。</p>
</li>
<li><p><strong>有些</strong>commit已经<strong>push</strong>到了远程仓库。</p>
</li>
</ul>
<p>对于 <font color=009100><strong>情况一</strong></font>，可以采用如下策略解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log # 查看要合并的commit.记住最早的commit号。</span><br><span class="line">git reset commit_number # 回退到此commit号。因为没有使用--hard,所以内容都保存在工作区。</span><br><span class="line">git add . 将回退的的内容再次添加到暂存区</span><br><span class="line">git commit -m &quot;comment&quot;</span><br></pre></td></tr></table></figure>

<p>或者可以使用 git rebase 解决（后续有时间，再详细介绍了）</p>
<p>对于 <font color=009100><strong>情况二</strong></font>，可以考虑使用以下策略解决</p>
<ol>
<li><p>首先保证要推送的分支与本地分支<strong>同步</strong>。</p>
</li>
<li><p>使用上面提到的方式任意一种进行commit的<strong>合并</strong>。</p>
</li>
<li><p>使用git push –force-with-lease origin dev的方式强制<strong>推送</strong>。</p>
</li>
</ol>
<blockquote>
<p><font color=#0066CC>注意：如果推送的是主分支master,也可能会推送失败，并提示(You are not allowed to force push code to a protected branch on this project.)这是由于gitlab等服务器设置了主分支保护造成的。可以设置gitlab的”Settings” -&gt; “Repository” -&gt; scroll down to “Protected branches”.然后再推送。</font></p>
</blockquote>
<table><tr><td bgcolor=lightblue><font color=000000>情景三： 主分支更新后，如何合并新的更新到自己的xx分支？</td></tr></table>





<table><tr><td bgcolor=lightblue><font color=000000>情景四: 一个小疑惑，已经解决</td></tr></table>

<p>以下两种操作是否等价？ 等价</p>
<p>A：拉代码，改代码，新建分支，push到新分支</p>
<p>B：拉代码，新建分支，改代码，push到新分支</p>
<p><font color=#000079>               &lt;未完待续——————————————————–&gt; 最后编辑于 2021.9.26  10:35 </font> </p>
]]></content>
  </entry>
  <entry>
    <title>论文笔记模板</title>
    <url>/2021/09/27/blog7/</url>
    <content><![CDATA[<h3 id="阅读笔记模板"><a href="#阅读笔记模板" class="headerlink" title="阅读笔记模板"></a>阅读笔记模板</h3><h1 id="论文题目"><a href="#论文题目" class="headerlink" title="论文题目"></a>论文题目</h1><h3 id="2016-CVPR（时间-，会议）"><a href="#2016-CVPR（时间-，会议）" class="headerlink" title="2016 CVPR（时间 ，会议）"></a>2016 CVPR（时间 ，会议）</h3><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><ul>
<li>作者研究了诸多的融合方式，有了以下发现：<ul>
<li>相比于在softmax层做融合，一个时空网络在卷积层融合能够达到相同的效果，但是却可以节省许多参数开销。</li>
<li>在靠后的层做融合效果要更好。同时在分类层添加额外的融合能够提升整体效果。</li>
<li>在时间和空间信息交汇的位置对抽象的卷积特征做pooling能够显著提升模型表现。</li>
</ul>
</li>
<li>基于这些作者设计了新的CNN结构来完成视频的时空信息融合，并达到SOTA。</li>
</ul>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><h2 id="2-Related-work"><a href="#2-Related-work" class="headerlink" title="2.Related work"></a>2.Related work</h2><hr>
<h2 id="3-Approach"><a href="#3-Approach" class="headerlink" title="3.Approach"></a>3.Approach</h2><h3 id="3-1-Spatial-fusion"><a href="#3-1-Spatial-fusion" class="headerlink" title="3.1.Spatial fusion"></a>3.1.Spatial fusion</h3><h3 id="3-2-融合位置"><a href="#3-2-融合位置" class="headerlink" title="3.2 融合位置"></a>3.2 融合位置</h3><h3 id="3-3时间融合"><a href="#3-3时间融合" class="headerlink" title="3.3时间融合"></a>3.3时间融合</h3><h3 id="3-4-Proposed-architecture"><a href="#3-4-Proposed-architecture" class="headerlink" title="3.4 Proposed architecture"></a>3.4 Proposed architecture</h3><h3 id="3-5-Implementation-details"><a href="#3-5-Implementation-details" class="headerlink" title="3.5 Implementation details"></a>3.5 Implementation details</h3><h4 id="双流结构："><a href="#双流结构：" class="headerlink" title="双流结构："></a>双流结构：</h4><h4 id="双流卷积fusion："><a href="#双流卷积fusion：" class="headerlink" title="双流卷积fusion："></a>双流卷积fusion：</h4><h4 id="Spatiotemporal-architecture："><a href="#Spatiotemporal-architecture：" class="headerlink" title="Spatiotemporal architecture："></a>Spatiotemporal architecture：</h4><h2 id="4-Evaluation"><a href="#4-Evaluation" class="headerlink" title="4.Evaluation"></a>4.Evaluation</h2><h3 id="4-1-数据和experimental-protocols"><a href="#4-1-数据和experimental-protocols" class="headerlink" title="4.1 数据和experimental protocols"></a>4.1 数据和experimental protocols</h3><h3 id="4-2-空间上融合两个流"><a href="#4-2-空间上融合两个流" class="headerlink" title="4.2 空间上融合两个流"></a>4.2 空间上融合两个流</h3><h3 id="4-3-融合位置"><a href="#4-3-融合位置" class="headerlink" title="4.3 融合位置"></a>4.3 融合位置</h3><h3 id="4-4-Going-from-deep-to-very-deep-models"><a href="#4-4-Going-from-deep-to-very-deep-models" class="headerlink" title="4.4 Going from deep to very deep models"></a>4.4 Going from deep to very deep models</h3><h3 id="4-5-如何在时间流融合"><a href="#4-5-如何在时间流融合" class="headerlink" title="4.5 如何在时间流融合"></a>4.5 如何在时间流融合</h3><h3 id="4-6-与SOTA比较"><a href="#4-6-与SOTA比较" class="headerlink" title="4.6 与SOTA比较"></a>4.6 与SOTA比较</h3>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 从基础使用到进阶</title>
    <url>/2021/09/25/blog5/</url>
    <content><![CDATA[<blockquote>
<p>是什么，为什么，如何做？</p>
</blockquote>
<p><strong>使用 markdown 的时间也快两年了，在此重新补充一些新的markdown使用技巧，以帮助自己能够更方便地撰写文档。</strong></p>
<h3 id="通过使用三个星号建立一个分割线"><a href="#通过使用三个星号建立一个分割线" class="headerlink" title="通过使用三个星号建立一个分割线"></a>通过使用三个星号建立一个分割线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=lightblue><font color=red>效果如下：</td></tr></table>

<hr>
<h3 id="更改字体颜色"><a href="#更改字体颜色" class="headerlink" title="更改字体颜色"></a>更改字体颜色</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=red&gt;我是红色&lt;/font&gt;</span><br><span class="line">&lt;font color=#008000&gt;我是绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;</span><br><span class="line">&lt;font size=5&gt;我是尺寸&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot; color=green size=5&gt;我是黑体，绿色，尺寸为5&lt;/font&gt;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=lightblue><font color=red>效果如下：</td></tr></table>

<p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color=red>我是红色</font><br><font color=#008000>我是绿色</font><br><font color=Blue>我是蓝色</font><br><font size=5>我是尺寸</font><br><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></p>
<h3 id="为文字添加背景色"><a href="#为文字添加背景色" class="headerlink" title="为文字添加背景色"></a>为文字添加背景色</h3><p>由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）。 语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;背景色yellow&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<table><tr><td bgcolor=yellow>背景色yellow</td></tr></table>



<h3 id="添加-html-类型的图片"><a href="#添加-html-类型的图片" class="headerlink" title="添加 html 类型的图片"></a>添加 html 类型的图片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;img src = &#x27;https://s3.bmp.ovh/imgs/2021/09/afed30d2caa2fd1c.png&#x27; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div align="center">
<img src = 'https://s3.bmp.ovh/imgs/2021/09/afed30d2caa2fd1c.png' />
</div>



<h3 id="附录-html-颜色集合-（-可自由定义-）"><a href="#附录-html-颜色集合-（-可自由定义-）" class="headerlink" title="附录 html 颜色集合 （ 可自由定义 ）"></a>附录 html 颜色集合 （ 可自由定义 ）</h3><div align="center">
<table cellspacing="0" width="800" border="1">
    <tbody>
        <tr>
            <td width="60" bgcolor="#000000">&nbsp;</td>
            <td width="50">#000000</td>
            <td width="60" bgcolor="#2f0000">&nbsp;</td>
            <td width="50">#2F0000</td>
            <td width="60" bgcolor="#600030">&nbsp;</td>
            <td width="50">#600030</td>
            <td width="60" bgcolor="#460046">&nbsp;</td>
            <td width="50">#460046</td>
            <td width="60" bgcolor="#28004d">&nbsp;</td>
            <td width="50">#28004D</td>
        </tr>
        <tr>
            <td bgcolor="#272727">&nbsp;</td>
            <td>#272727</td>
            <td bgcolor="#4d0000">&nbsp;</td>
            <td>#4D0000</td>
            <td bgcolor="#820041">&nbsp;</td>
            <td>#820041</td>
            <td bgcolor="#5e005e">&nbsp;</td>
            <td>#5E005E</td>
            <td bgcolor="#3a006f">&nbsp;</td>
            <td>#3A006F</td>
        </tr>
        <tr>
            <td bgcolor="#3c3c3c">&nbsp;</td>
            <td>#3C3C3C</td>
            <td bgcolor="#600000">&nbsp;</td>
            <td>#600000</td>
            <td bgcolor="#9f0050">&nbsp;</td>
            <td>#9F0050</td>
            <td bgcolor="#750075">&nbsp;</td>
            <td>#750075</td>
            <td bgcolor="#4b0091">&nbsp;</td>
            <td>#4B0091</td>
        </tr>
        <tr>
            <td bgcolor="#4f4f4f">&nbsp;</td>
            <td>#4F4F4F</td>
            <td bgcolor="#750000">&nbsp;</td>
            <td>#750000</td>
            <td bgcolor="#bf0060">&nbsp;</td>
            <td>#BF0060</td>
            <td bgcolor="#930093">&nbsp;</td>
            <td>#930093</td>
            <td bgcolor="#5b00ae">&nbsp;</td>
            <td>#5B00AE</td>
        </tr>
        <tr>
            <td bgcolor="#5b5b5b">&nbsp;</td>
            <td>#5B5B5B</td>
            <td bgcolor="#930000">&nbsp;</td>
            <td>#930000</td>
            <td bgcolor="#d9006c">&nbsp;</td>
            <td>#D9006C</td>
            <td bgcolor="#ae00ae">&nbsp;</td>
            <td>#AE00AE</td>
            <td bgcolor="#6f00d2">&nbsp;</td>
            <td>#6F00D2</td>
        </tr>
        <tr>
            <td bgcolor="#6c6c6c">&nbsp;</td>
            <td>#6C6C6C</td>
            <td bgcolor="#ae0000">&nbsp;</td>
            <td>#AE0000</td>
            <td bgcolor="#f00078">&nbsp;</td>
            <td>#F00078</td>
            <td bgcolor="#d200d2">&nbsp;</td>
            <td>#D200D2</td>
            <td bgcolor="#8600ff">&nbsp;</td>
            <td>#8600FF</td>
        </tr>
        <tr>
            <td bgcolor="#7b7b7b">&nbsp;</td>
            <td>#7B7B7B</td>
            <td bgcolor="#ce0000">&nbsp;</td>
            <td>#CE0000</td>
            <td bgcolor="#ff0080">&nbsp;</td>
            <td>#FF0080</td>
            <td bgcolor="#e800e8">&nbsp;</td>
            <td>#E800E8</td>
            <td bgcolor="#921aff">&nbsp;</td>
            <td>#921AFF</td>
        </tr>
        <tr>
            <td bgcolor="#8e8e8e">&nbsp;</td>
            <td>#8E8E8E</td>
            <td bgcolor="#ea0000">&nbsp;</td>
            <td>#EA0000</td>
            <td bgcolor="#ff359a">&nbsp;</td>
            <td>#FF359A</td>
            <td bgcolor="#ff00ff">&nbsp;</td>
            <td>#FF00FF</td>
            <td bgcolor="#9f35ff">&nbsp;</td>
            <td>#9F35FF</td>
        </tr>
        <tr>
            <td bgcolor="#9d9d9d">&nbsp;</td>
            <td>#9D9D9D</td>
            <td bgcolor="#ff0000">&nbsp;</td>
            <td>#FF0000</td>
            <td bgcolor="#ff60af">&nbsp;</td>
            <td>#FF60AF</td>
            <td bgcolor="#ff44ff">&nbsp;</td>
            <td>#FF44FF</td>
            <td bgcolor="#b15bff">&nbsp;</td>
            <td>#B15BFF</td>
        </tr>
        <tr>
            <td bgcolor="#adadad">&nbsp;</td>
            <td>#ADADAD</td>
            <td bgcolor="#ff2d2d">&nbsp;</td>
            <td>#FF2D2D</td>
            <td bgcolor="#ff79bc">&nbsp;</td>
            <td>#FF79BC</td>
            <td bgcolor="#ff77ff">&nbsp;</td>
            <td>#FF77FF</td>
            <td bgcolor="#be77ff">&nbsp;</td>
            <td>#BE77FF</td>
        </tr>
        <tr>
            <td bgcolor="#bebebe">&nbsp;</td>
            <td>#BEBEBE</td>
            <td bgcolor="#ff5151">&nbsp;</td>
            <td>#FF5151</td>
            <td bgcolor="#ff95ca">&nbsp;</td>
            <td>#FF95CA</td>
            <td bgcolor="#ff8eff">&nbsp;</td>
            <td>#FF8EFF</td>
            <td bgcolor="#ca8eff">&nbsp;</td>
            <td>#CA8EFF</td>
        </tr>
        <tr>
            <td bgcolor="#d0d0d0">&nbsp;</td>
            <td>#d0d0d0</td>
            <td bgcolor="#ff7575">&nbsp;</td>
            <td>#ff7575</td>
            <td bgcolor="#ffaad5">&nbsp;</td>
            <td>#ffaad5</td>
            <td bgcolor="#ffa6ff">&nbsp;</td>
            <td>#ffa6ff</td>
            <td bgcolor="#d3a4ff">&nbsp;</td>
            <td>#d3a4ff</td>
        </tr>
        <tr>
            <td bgcolor="#e0e0e0">&nbsp;</td>
            <td>#E0E0E0</td>
            <td bgcolor="#ff9797">&nbsp;</td>
            <td>#FF9797</td>
            <td bgcolor="#ffc1e0">&nbsp;</td>
            <td>#FFC1E0</td>
            <td bgcolor="#ffbfff">&nbsp;</td>
            <td>#FFBFFF</td>
            <td bgcolor="#dcb5ff">&nbsp;</td>
            <td>#DCB5FF</td>
        </tr>
        <tr>
            <td bgcolor="#f0f0f0">&nbsp;</td>
            <td>#F0F0F0</td>
            <td bgcolor="#ffb5b5">&nbsp;</td>
            <td>#FFB5B5</td>
            <td bgcolor="#ffd9ec">&nbsp;</td>
            <td>#FFD9EC</td>
            <td bgcolor="#ffd0ff">&nbsp;</td>
            <td>#FFD0FF</td>
            <td bgcolor="#e6caff">&nbsp;</td>
            <td>#E6CAFF</td>
        </tr>
        <tr>
            <td bgcolor="#fcfcfc">&nbsp;</td>
            <td>#FCFCFC</td>
            <td bgcolor="#ffd2d2">&nbsp;</td>
            <td>#FFD2D2</td>
            <td bgcolor="#ffecf5">&nbsp;</td>
            <td>#FFECF5</td>
            <td bgcolor="#ffe6ff">&nbsp;</td>
            <td>#FFE6FF</td>
            <td bgcolor="#f1e1ff">&nbsp;</td>
            <td>#F1E1FF</td>
        </tr>
        <tr>
            <td bgcolor="#ffffff">&nbsp;</td>
            <td>#FFFFFF</td>
            <td bgcolor="#ffecec">&nbsp;</td>
            <td>#FFECEC</td>
            <td bgcolor="#fff7fb">&nbsp;</td>
            <td>#FFF7FB</td>
            <td bgcolor="#fff7ff">&nbsp;</td>
            <td>#FFF7FF</td>
            <td bgcolor="#faf4ff">&nbsp;</td>
            <td>#FAF4FF</td>
        </tr>
        <tr>
            <td bgcolor="#000079">&nbsp;</td>
            <td>#000079</td>
            <td bgcolor="#000079">&nbsp;</td>
            <td>#000079</td>
            <td bgcolor="#003e3e">&nbsp;</td>
            <td>#003E3E</td>
            <td bgcolor="#006030">&nbsp;</td>
            <td>#006030</td>
            <td bgcolor="#006000">&nbsp;</td>
            <td>#006000</td>
        </tr>
        <tr>
            <td bgcolor="#000093">&nbsp;</td>
            <td>#000093</td>
            <td bgcolor="#003d79">&nbsp;</td>
            <td>#003D79</td>
            <td bgcolor="#005757">&nbsp;</td>
            <td>#005757</td>
            <td bgcolor="#01814a">&nbsp;</td>
            <td>#01814A</td>
            <td bgcolor="#007500">&nbsp;</td>
            <td>#007500</td>
        </tr>
        <tr>
            <td bgcolor="#0000c6">&nbsp;</td>
            <td>#0000C6</td>
            <td bgcolor="#004b97">&nbsp;</td>
            <td>#004B97</td>
            <td bgcolor="#007979">&nbsp;</td>
            <td>#007979</td>
            <td bgcolor="#019858">&nbsp;</td>
            <td>#019858</td>
            <td bgcolor="#009100">&nbsp;</td>
            <td>#009100</td>
        </tr>
        <tr>
            <td bgcolor="#0000c6">&nbsp;</td>
            <td>#0000C6</td>
            <td bgcolor="#005ab5">&nbsp;</td>
            <td>#005AB5</td>
            <td bgcolor="#009393">&nbsp;</td>
            <td>#009393</td>
            <td bgcolor="#01b468">&nbsp;</td>
            <td>#01B468</td>
            <td bgcolor="#00a600">&nbsp;</td>
            <td>#00A600</td>
        </tr>
        <tr>
            <td bgcolor="#0000e3">&nbsp;</td>
            <td>#0000E3</td>
            <td bgcolor="#0066cc">&nbsp;</td>
            <td>#0066CC</td>
            <td bgcolor="#00aeae">&nbsp;</td>
            <td>#00AEAE</td>
            <td bgcolor="#02c874">&nbsp;</td>
            <td>#02C874</td>
            <td bgcolor="#00bb00">&nbsp;</td>
            <td>#00BB00</td>
        </tr>
        <tr>
            <td bgcolor="#2828ff">&nbsp;</td>
            <td>#2828FF</td>
            <td bgcolor="#0072e3">&nbsp;</td>
            <td>#0072E3</td>
            <td bgcolor="#00caca">&nbsp;</td>
            <td>#00CACA</td>
            <td bgcolor="#02df82">&nbsp;</td>
            <td>#02DF82</td>
            <td bgcolor="#00db00">&nbsp;</td>
            <td>#00DB00</td>
        </tr>
        <tr>
            <td bgcolor="#4a4aff">&nbsp;</td>
            <td>#4A4AFF</td>
            <td bgcolor="#0080ff">&nbsp;</td>
            <td>#0080FF</td>
            <td bgcolor="#00e3e3">&nbsp;</td>
            <td>#00E3E3</td>
            <td bgcolor="#02f78e">&nbsp;</td>
            <td>#02F78E</td>
            <td bgcolor="#00ec00">&nbsp;</td>
            <td>#00EC00</td>
        </tr>
        <tr>
            <td bgcolor="#6a6aff">&nbsp;</td>
            <td>#6A6AFF</td>
            <td bgcolor="#2894ff">&nbsp;</td>
            <td>#2894FF</td>
            <td bgcolor="#00ffff">&nbsp;</td>
            <td>#00FFFF</td>
            <td bgcolor="#1afd9c">&nbsp;</td>
            <td>#1AFD9C</td>
            <td bgcolor="#28ff28">&nbsp;</td>
            <td>#28FF28</td>
        </tr>
        <tr>
            <td bgcolor="#7d7dff">&nbsp;</td>
            <td>#7D7DFF</td>
            <td bgcolor="#46a3ff">&nbsp;</td>
            <td>#46A3FF</td>
            <td bgcolor="#4dffff">&nbsp;</td>
            <td>#4DFFFF</td>
            <td bgcolor="#4efeb3">&nbsp;</td>
            <td>#4EFEB3</td>
            <td bgcolor="#53ff53">&nbsp;</td>
            <td>#53FF53</td>
        </tr>
        <tr>
            <td bgcolor="#9393ff">&nbsp;</td>
            <td>#9393FF</td>
            <td bgcolor="#66b3ff">&nbsp;</td>
            <td>#66B3FF</td>
            <td bgcolor="#80ffff">&nbsp;</td>
            <td>#80FFFF</td>
            <td bgcolor="#7afec6">&nbsp;</td>
            <td>#7AFEC6</td>
            <td bgcolor="#79ff79">&nbsp;</td>
            <td>#79FF79</td>
        </tr>
        <tr>
            <td bgcolor="#aaaaff">&nbsp;</td>
            <td>#AAAAFF</td>
            <td bgcolor="#84c1ff">&nbsp;</td>
            <td>#84C1FF</td>
            <td bgcolor="#a6ffff">&nbsp;</td>
            <td>#A6FFFF</td>
            <td bgcolor="#96fed1">&nbsp;</td>
            <td>#96FED1</td>
            <td bgcolor="#93ff93">&nbsp;</td>
            <td>#93FF93</td>
        </tr>
        <tr>
            <td bgcolor="#b9b9ff">&nbsp;</td>
            <td>#B9B9FF</td>
            <td bgcolor="#97cbff">&nbsp;</td>
            <td>#97CBFF</td>
            <td bgcolor="#bbffff">&nbsp;</td>
            <td>#BBFFFF</td>
            <td bgcolor="#adfedc">&nbsp;</td>
            <td>#ADFEDC</td>
            <td bgcolor="#a6ffa6">&nbsp;</td>
            <td>#A6FFA6</td>
        </tr>
        <tr>
            <td bgcolor="#ceceff">&nbsp;</td>
            <td>#CECEFF</td>
            <td bgcolor="#acd6ff">&nbsp;</td>
            <td>#ACD6FF</td>
            <td bgcolor="#caffff">&nbsp;</td>
            <td>#CAFFFF</td>
            <td bgcolor="#c1ffe4">&nbsp;</td>
            <td>#C1FFE4</td>
            <td bgcolor="#bbffbb">&nbsp;</td>
            <td>#BBFFBB</td>
        </tr>
        <tr>
            <td bgcolor="#ddddff">&nbsp;</td>
            <td>#DDDDFF</td>
            <td bgcolor="#c4e1ff">&nbsp;</td>
            <td>#C4E1FF</td>
            <td bgcolor="#d9ffff">&nbsp;</td>
            <td>#D9FFFF</td>
            <td bgcolor="#d7ffee">&nbsp;</td>
            <td>#D7FFEE</td>
            <td bgcolor="#ceffce">&nbsp;</td>
            <td>#CEFFCE</td>
        </tr>
        <tr>
            <td bgcolor="#ececff">&nbsp;</td>
            <td>#ECECFF</td>
            <td bgcolor="#d2e9ff">&nbsp;</td>
            <td>#D2E9FF</td>
            <td bgcolor="#ecffff">&nbsp;</td>
            <td>#ECFFFF</td>
            <td bgcolor="#e8fff5">&nbsp;</td>
            <td>#E8FFF5</td>
            <td bgcolor="#dfffdf">&nbsp;</td>
            <td>#DFFFDF</td>
        </tr>
        <tr>
            <td bgcolor="#fbfbff">&nbsp;</td>
            <td>#FBFBFF</td>
            <td bgcolor="#ecf5ff">&nbsp;</td>
            <td>#ECF5FF</td>
            <td bgcolor="#fdffff">&nbsp;</td>
            <td>#FDFFFF</td>
            <td bgcolor="#fbfffd">&nbsp;</td>
            <td>#FBFFFD</td>
            <td bgcolor="#f0fff0">&nbsp;</td>
            <td>#F0FFF0</td>
        </tr>
        <tr>
            <td bgcolor="#467500">&nbsp;</td>
            <td>#467500</td>
            <td bgcolor="#424200">&nbsp;</td>
            <td>#424200</td>
            <td bgcolor="#5b4b00">&nbsp;</td>
            <td>#5B4B00</td>
            <td bgcolor="#844200">&nbsp;</td>
            <td>#844200</td>
            <td bgcolor="#642100">&nbsp;</td>
            <td>#642100</td>
        </tr>
        <tr>
            <td bgcolor="#548c00">&nbsp;</td>
            <td>#548C00</td>
            <td bgcolor="#5b5b00">&nbsp;</td>
            <td>#5B5B00</td>
            <td bgcolor="#796400">&nbsp;</td>
            <td>#796400</td>
            <td bgcolor="#9f5000">&nbsp;</td>
            <td>#9F5000</td>
            <td bgcolor="#842b00">&nbsp;</td>
            <td>#842B00</td>
        </tr>
        <tr>
            <td bgcolor="#64a600">&nbsp;</td>
            <td>#64A600</td>
            <td bgcolor="#737300">&nbsp;</td>
            <td>#737300</td>
            <td bgcolor="#977c00">&nbsp;</td>
            <td>#977C00</td>
            <td bgcolor="#bb5e00">&nbsp;</td>
            <td>#BB5E00</td>
            <td bgcolor="#a23400">&nbsp;</td>
            <td>#A23400</td>
        </tr>
        <tr>
            <td bgcolor="#73bf00">&nbsp;</td>
            <td>#73BF00</td>
            <td bgcolor="#8c8c00">&nbsp;</td>
            <td>#8C8C00</td>
            <td bgcolor="#ae8f00">&nbsp;</td>
            <td>#AE8F00</td>
            <td bgcolor="#d26900">&nbsp;</td>
            <td>#D26900</td>
            <td bgcolor="#bb3d00">&nbsp;</td>
            <td>#BB3D00</td>
        </tr>
        <tr>
            <td bgcolor="#82d900">&nbsp;</td>
            <td>#82D900</td>
            <td bgcolor="#a6a600">&nbsp;</td>
            <td>#A6A600</td>
            <td bgcolor="#c6a300">&nbsp;</td>
            <td>#C6A300</td>
            <td bgcolor="#ea7500">&nbsp;</td>
            <td>#EA7500</td>
            <td bgcolor="#d94600">&nbsp;</td>
            <td>#D94600</td>
        </tr>
        <tr>
            <td bgcolor="#8cea00">&nbsp;</td>
            <td>#8CEA00</td>
            <td bgcolor="#c4c400">&nbsp;</td>
            <td>#C4C400</td>
            <td bgcolor="#d9b300">&nbsp;</td>
            <td>#D9B300</td>
            <td bgcolor="#ff8000">&nbsp;</td>
            <td>#FF8000</td>
            <td bgcolor="#f75000">&nbsp;</td>
            <td>#F75000</td>
        </tr>
        <tr>
            <td bgcolor="#9aff02">&nbsp;</td>
            <td>#9AFF02</td>
            <td bgcolor="#e1e100">&nbsp;</td>
            <td>#E1E100</td>
            <td bgcolor="#eac100">&nbsp;</td>
            <td>#EAC100</td>
            <td bgcolor="#ff9224">&nbsp;</td>
            <td>#FF9224</td>
            <td bgcolor="#ff5809">&nbsp;</td>
            <td>#FF5809</td>
        </tr>
        <tr>
            <td bgcolor="#a8ff24">&nbsp;</td>
            <td>#A8FF24</td>
            <td bgcolor="#f9f900">&nbsp;</td>
            <td>#F9F900</td>
            <td bgcolor="#ffd306">&nbsp;</td>
            <td>#FFD306</td>
            <td bgcolor="#ffa042">&nbsp;</td>
            <td>#FFA042</td>
            <td bgcolor="#ff8040">&nbsp;</td>
            <td>#FF8040</td>
        </tr>
        <tr>
            <td bgcolor="#b7ff4a">&nbsp;</td>
            <td>#B7FF4A</td>
            <td bgcolor="#ffff37">&nbsp;</td>
            <td>#FFFF37</td>
            <td bgcolor="#ffdc35">&nbsp;</td>
            <td>#FFDC35</td>
            <td bgcolor="#ffaf60">&nbsp;</td>
            <td>#FFAF60</td>
            <td bgcolor="#ff8f59">&nbsp;</td>
            <td>#FF8F59</td>
        </tr>
        <tr>
            <td bgcolor="#c2ff68">&nbsp;</td>
            <td>#C2FF68</td>
            <td bgcolor="#ffff6f">&nbsp;</td>
            <td>#FFFF6F</td>
            <td bgcolor="#ffe153">&nbsp;</td>
            <td>#FFE153</td>
            <td bgcolor="#ffbb77">&nbsp;</td>
            <td>#FFBB77</td>
            <td bgcolor="#ff9d6f">&nbsp;</td>
            <td>#FF9D6F</td>
        </tr>
        <tr>
            <td bgcolor="#ccff80">&nbsp;</td>
            <td>#CCFF80</td>
            <td bgcolor="#ffff93">&nbsp;</td>
            <td>#FFFF93</td>
            <td bgcolor="#ffe66f">&nbsp;</td>
            <td>#FFE66F</td>
            <td bgcolor="#ffc78e">&nbsp;</td>
            <td>#FFC78E</td>
            <td bgcolor="#ffad86">&nbsp;</td>
            <td>#FFAD86</td>
        </tr>
        <tr>
            <td bgcolor="#d3ff93">&nbsp;</td>
            <td>#D3FF93</td>
            <td bgcolor="#ffffaa">&nbsp;</td>
            <td>#FFFFAA</td>
            <td bgcolor="#ffed97">&nbsp;</td>
            <td>#FFED97</td>
            <td bgcolor="#ffd1a4">&nbsp;</td>
            <td>#FFD1A4</td>
            <td bgcolor="#ffbd9d">&nbsp;</td>
            <td>#FFBD9D</td>
        </tr>
        <tr>
            <td bgcolor="#deffac">&nbsp;</td>
            <td>#DEFFAC</td>
            <td bgcolor="#ffffb9">&nbsp;</td>
            <td>#FFFFB9</td>
            <td bgcolor="#fff0ac">&nbsp;</td>
            <td>#FFF0AC</td>
            <td bgcolor="#ffdcb9">&nbsp;</td>
            <td>#FFDCB9</td>
            <td bgcolor="#ffcbb3">&nbsp;</td>
            <td>#FFCBB3</td>
        </tr>
        <tr>
            <td bgcolor="#e8ffc4">&nbsp;</td>
            <td>#E8FFC4</td>
            <td bgcolor="#ffffce">&nbsp;</td>
            <td>#FFFFCE</td>
            <td bgcolor="#fff4c1">&nbsp;</td>
            <td>#FFF4C1</td>
            <td bgcolor="#ffe4ca">&nbsp;</td>
            <td>#FFE4CA</td>
            <td bgcolor="#ffdac8">&nbsp;</td>
            <td>#FFDAC8</td>
        </tr>
        <tr>
            <td bgcolor="#efffd7">&nbsp;</td>
            <td>#EFFFD7</td>
            <td bgcolor="#ffffdf">&nbsp;</td>
            <td>#FFFFDF</td>
            <td bgcolor="#fff8d7">&nbsp;</td>
            <td>#FFF8D7</td>
            <td bgcolor="#ffeedd">&nbsp;</td>
            <td>#FFEEDD</td>
            <td bgcolor="#ffe6d9">&nbsp;</td>
            <td>#FFE6D9</td>
        </tr>
        <tr>
            <td bgcolor="#f5ffe8">&nbsp;</td>
            <td>#F5FFE8</td>
            <td bgcolor="#fffff4">&nbsp;</td>
            <td>#FFFFF4</td>
            <td bgcolor="#fffcec">&nbsp;</td>
            <td>#FFFCEC</td>
            <td bgcolor="#fffaf4">&nbsp;</td>
            <td>#FFFAF4</td>
            <td bgcolor="#fff3ee">&nbsp;</td>
            <td>#FFF3EE</td>
        </tr>
        <tr>
            <td bgcolor="#613030">&nbsp;</td>
            <td>#613030</td>
            <td bgcolor="#616130">&nbsp;</td>
            <td>#616130</td>
            <td bgcolor="#336666">&nbsp;</td>
            <td>#336666</td>
            <td bgcolor="#484891">&nbsp;</td>
            <td>#484891</td>
            <td bgcolor="#6c3365">&nbsp;</td>
            <td>#6C3365</td>
        </tr>
        <tr>
            <td bgcolor="#743a3a">&nbsp;</td>
            <td>#743A3A</td>
            <td bgcolor="#707038">&nbsp;</td>
            <td>#707038</td>
            <td bgcolor="#3d7878">&nbsp;</td>
            <td>#3D7878</td>
            <td bgcolor="#5151a2">&nbsp;</td>
            <td>#5151A2</td>
            <td bgcolor="#7e3d76">&nbsp;</td>
            <td>#7E3D76</td>
        </tr>
        <tr>
            <td bgcolor="#804040">&nbsp;</td>
            <td>#804040</td>
            <td bgcolor="#808040">&nbsp;</td>
            <td>#808040</td>
            <td bgcolor="#408080">&nbsp;</td>
            <td>#408080</td>
            <td bgcolor="#5a5aad">&nbsp;</td>
            <td>#5A5AAD</td>
            <td bgcolor="#8f4586">&nbsp;</td>
            <td>#8F4586</td>
        </tr>
        <tr>
            <td bgcolor="#984b4b">&nbsp;</td>
            <td>#984B4B</td>
            <td bgcolor="#949449">&nbsp;</td>
            <td>#949449</td>
            <td bgcolor="#4f9d9d">&nbsp;</td>
            <td>#4F9D9D</td>
            <td bgcolor="#7373b9">&nbsp;</td>
            <td>#7373B9</td>
            <td bgcolor="#9f4d95">&nbsp;</td>
            <td>#9F4D95</td>
        </tr>
        <tr>
            <td bgcolor="#ad5a5a">&nbsp;</td>
            <td>#AD5A5A</td>
            <td bgcolor="#a5a552">&nbsp;</td>
            <td>#A5A552</td>
            <td bgcolor="#5cadad">&nbsp;</td>
            <td>#5CADAD</td>
            <td bgcolor="#8080c0">&nbsp;</td>
            <td>#8080C0</td>
            <td bgcolor="#ae57a4">&nbsp;</td>
            <td>#AE57A4</td>
        </tr>
        <tr>
            <td bgcolor="#b87070">&nbsp;</td>
            <td>#B87070</td>
            <td bgcolor="#afaf61">&nbsp;</td>
            <td>#AFAF61</td>
            <td bgcolor="#6fb7b7">&nbsp;</td>
            <td>#6FB7B7</td>
            <td bgcolor="#9999cc">&nbsp;</td>
            <td>#9999CC</td>
            <td bgcolor="#b766ad">&nbsp;</td>
            <td>#B766AD</td>
        </tr>
        <tr>
            <td bgcolor="#c48888">&nbsp;</td>
            <td>#C48888</td>
            <td bgcolor="#b9b973">&nbsp;</td>
            <td>#B9B973</td>
            <td bgcolor="#81c0c0">&nbsp;</td>
            <td>#81C0C0</td>
            <td bgcolor="#a6a6d2">&nbsp;</td>
            <td>#A6A6D2</td>
            <td bgcolor="#c07ab8">&nbsp;</td>
            <td>#C07AB8</td>
        </tr>
        <tr>
            <td bgcolor="#cf9e9e">&nbsp;</td>
            <td>#CF9E9E</td>
            <td bgcolor="#c2c287">&nbsp;</td>
            <td>#C2C287</td>
            <td bgcolor="#95caca">&nbsp;</td>
            <td>#95CACA</td>
            <td bgcolor="#b8b8dc">&nbsp;</td>
            <td>#B8B8DC</td>
            <td bgcolor="#ca8ec2">&nbsp;</td>
            <td>#CA8EC2</td>
        </tr>
        <tr>
            <td bgcolor="#d9b3b3">&nbsp;</td>
            <td>#D9B3B3</td>
            <td bgcolor="#cdcd9a">&nbsp;</td>
            <td>#CDCD9A</td>
            <td bgcolor="#a3d1d1">&nbsp;</td>
            <td>#A3D1D1</td>
            <td bgcolor="#c7c7e2">&nbsp;</td>
            <td>#C7C7E2</td>
            <td bgcolor="#d2a2cc">&nbsp;</td>
            <td>#D2A2CC</td>
        </tr>
        <tr>
            <td bgcolor="#e1c4c4">&nbsp;</td>
            <td>#E1C4C4</td>
            <td bgcolor="#d6d6ad">&nbsp;</td>
            <td>#D6D6AD</td>
            <td bgcolor="#b3d9d9">&nbsp;</td>
            <td>#B3D9D9</td>
            <td bgcolor="#d8d8eb">&nbsp;</td>
            <td>#D8D8EB</td>
            <td bgcolor="#dab1d5">&nbsp;</td>
            <td>#DAB1D5</td>
        </tr>
        <tr>
            <td bgcolor="#ebd6d6">&nbsp;</td>
            <td>#EBD6D6</td>
            <td bgcolor="#dedebe">&nbsp;</td>
            <td>#DEDEBE</td>
            <td bgcolor="#c4e1e1">&nbsp;</td>
            <td>#C4E1E1</td>
            <td bgcolor="#e6e6f2">&nbsp;</td>
            <td>#E6E6F2</td>
            <td bgcolor="#e2c2de">&nbsp;</td>
            <td>#E2C2DE</td>
        </tr>
        <tr>
            <td bgcolor="#f2e6e6">&nbsp;</td>
            <td>#F2E6E6</td>
            <td bgcolor="#e8e8d0">&nbsp;</td>
            <td>#E8E8D0</td>
            <td bgcolor="#d1e9e9">&nbsp;</td>
            <td>#D1E9E9</td>
            <td bgcolor="#f3f3fa">&nbsp;</td>
            <td>#F3F3FA</td>
            <td bgcolor="#ebd3e8">&nbsp;</td>
            <td>#EBD3E8</td>
        </tr>
    </tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>GIRAFFE:Representing Scenes as Compositional Generative Neural Feature Fields</title>
    <url>/2021/09/27/blog8/</url>
    <content><![CDATA[<h1 id="GIRAFFE-Representing-Scenes-as-Compositional-Generative-Neural-Feature-Fields"><a href="#GIRAFFE-Representing-Scenes-as-Compositional-Generative-Neural-Feature-Fields" class="headerlink" title="GIRAFFE: Representing Scenes as Compositional Generative Neural Feature Fields"></a>GIRAFFE: Representing Scenes as Compositional Generative Neural Feature Fields</h1><h3 id="CVPR-2021-oral-best-paper-award"><a href="#CVPR-2021-oral-best-paper-award" class="headerlink" title="CVPR 2021 (oral, best paper award)"></a><a href="https://arxiv.org/abs/2011.12100">CVPR 2021 (oral, <strong>best paper award</strong>)</a></h3><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><h2 id="2-Related-work"><a href="#2-Related-work" class="headerlink" title="2.Related work"></a>2.Related work</h2><h2 id="3-Approach"><a href="#3-Approach" class="headerlink" title="3.Approach"></a>3.Approach</h2><h2 id="4-Evaluation"><a href="#4-Evaluation" class="headerlink" title="4.Evaluation"></a>4.Evaluation</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>cvpr</tag>
      </tags>
  </entry>
  <entry>
    <title>函数指针和指针函数</title>
    <url>/2021/09/29/blog9/</url>
    <content><![CDATA[<h2 id="函数指针和指针函数的使用"><a href="#函数指针和指针函数的使用" class="headerlink" title="函数指针和指针函数的使用"></a>函数指针和指针函数的使用</h2>]]></content>
      <categories>
        <category>c++ or c</category>
      </categories>
      <tags>
        <tag>语言</tag>
      </tags>
  </entry>
</search>
